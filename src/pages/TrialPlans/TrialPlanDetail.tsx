import React, { useState, useMemo } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  Button,
  Chip,
  Stack,
  Alert,
  CircularProgress,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  Divider,
  IconButton,
  Tooltip,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
} from '@mui/material';
import {
  ArrowBack as ArrowBackIcon,
  Add as AddIcon,
  Delete as DeleteIcon,
  FileDownload as ExportIcon,
} from '@mui/icons-material';
import { useParams, useNavigate } from 'react-router-dom';
import { useSnackbar } from 'notistack';
import { useQuery } from '@tanstack/react-query';
import apiClient from '../../api/client';
import { useTrialPlan, useDeleteTrialPlan } from '../../hooks/useTrialPlans';
import { useDictionaries } from '../../hooks/useDictionaries';
import { AddParticipantsToPlanDialog } from '../../components/trialPlans/AddParticipantsToPlanDialog';
import { AddCultureToPlanDialog } from '../../components/trialPlans/AddCultureToPlanDialog';
import { AddTrialTypeToCultureDialog } from '../../components/trialPlans/AddTrialTypeToCultureDialog';

// –¢–∏–ø—ã –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å —Ç–∏–ø–∞–º–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–π
interface TrialData {
  id: number;
  region_id: number;
  region_name: string;
  predecessor: string | number;
  predecessor_culture_name?: string;
  seeding_rate: number;
  season: string;
}

interface ParticipantWithTrials {
  id: number;
  patents_sort_id: number;
  sort_name?: string;
  statistical_group: 0 | 1;
  seeds_provision: string;
  participant_number: number;
  maturity_group: string;
  application?: number;
  year_started?: number;
  application_id?: number;
  trials: TrialData[];
  application_submit_year?: number;
}

interface TrialTypeData {
  id: number;
  trial_type_id: number;
  trial_type_name: string;
  season: string;
  participants: ParticipantWithTrials[];
}

interface CultureData {
  id: number;
  culture: number;
  culture_name: string;
  culture_group: string;
  trial_types: TrialTypeData[];
}

const TrialPlanDetail: React.FC = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const { enqueueSnackbar } = useSnackbar();
  const dictionaries = useDictionaries();

  const [filterCulture, setFilterCulture] = useState<number | ''>('');
  const [filterMaturityGroup, setFilterMaturityGroup] = useState<string>('');
  const [addParticipantsDialogOpen, setAddParticipantsDialogOpen] = useState(false);
  const [addCultureDialogOpen, setAddCultureDialogOpen] = useState(false);
  const [addTrialTypeDialogOpen, setAddTrialTypeDialogOpen] = useState(false);
  const [selectedCultureForParticipants, setSelectedCultureForParticipants] = useState<{
    oblastId: number;
    cultureId: number;
    cultureName: string;
    trialTypeId: number;
  } | null>(null);
  const [selectedCultureForTrialType, setSelectedCultureForTrialType] = useState<{
    cultureId: number;
    cultureName: string;
  } | null>(null);

  const { data: trialPlan, isLoading, error } = useTrialPlan(Number(id));
  const deleteTrialPlan = useDeleteTrialPlan();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ patents_sort_id –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–ª–∞–Ω–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Å–æ—Ä—Ç–æ–≤
  const uniquePatentsSortIds = useMemo(() => {
    if (!trialPlan?.cultures) return [];
    const ids = new Set<number>();
    trialPlan.cultures.forEach((culture: any) => {
      culture.trial_types?.forEach((trialType: any) => {
        trialType.participants?.forEach((participant: any) => {
          if (participant.patents_sort_id) {
            ids.add(participant.patents_sort_id);
          }
        });
      });
    });
    const result = Array.from(ids);
    console.log('üîç –ù–∞–π–¥–µ–Ω—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ patents_sort_id:', result);
    console.log('üìä –î–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏–π (–Ω–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞):', trialPlan);
    return result;
  }, [trialPlan]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ—Ä—Ç–æ–≤ –ø–æ patents_sort_id
  const { data: sortNamesMap = {}, isLoading: isLoadingSortNames } = useQuery({
    queryKey: ['sortNames', uniquePatentsSortIds],
    queryFn: async () => {
      if (uniquePatentsSortIds.length === 0) return {};
      
      console.log('üöÄ –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ—Ä—Ç–æ–≤ –¥–ª—è patents_sort_id:', uniquePatentsSortIds);
      
      const promises = uniquePatentsSortIds.map(async (patentsSortId) => {
        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Ä—Ç–∞ –ø–æ patents_sort_id
          const response = await apiClient.get(`/patents/sorts/${patentsSortId}/`);
          console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Å–æ—Ä—Ç ${patentsSortId}:`, response.data);
          return { [patentsSortId]: response.data?.name || null };
        } catch (error) {
          console.warn(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∞ –¥–ª—è patents_sort_id: ${patentsSortId}`, error);
          return { [patentsSortId]: null };
        }
      });
      
      const results = await Promise.all(promises);
      const finalMap = results.reduce((acc, curr) => ({ ...acc, ...curr }), {});
      console.log('üìã –ò—Ç–æ–≥–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –Ω–∞–∑–≤–∞–Ω–∏–π —Å–æ—Ä—Ç–æ–≤:', finalMap);
      return finalMap;
    },
    enabled: uniquePatentsSortIds.length > 0,
    staleTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
  });

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
  const getPredecessorName = (predecessor: string | number): string => {
    if (predecessor === 'fallow') return '–ü–∞—Ä';
    if (typeof predecessor === 'number') {
      const culture = dictionaries.cultures?.find((c: any) => c.id === predecessor);
      return culture?.name || `ID ${predecessor}`;
    }
    return predecessor;
  };

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∞
  const getSortName = (participant: ParticipantWithTrials): string => {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ sort_name —É —É—á–∞—Å—Ç–Ω–∏–∫–∞
    if (participant.sort_name) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ sort_name –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${participant.id}:`, participant.sort_name);
      return participant.sort_name;
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π
    const sortName = sortNamesMap[participant.patents_sort_id];
    if (sortName) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤ sortNamesMap –¥–ª—è patents_sort_id ${participant.patents_sort_id}:`, sortName);
      return sortName;
    }
    
    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è patents_sort_id ${participant.patents_sort_id}:`, {
      participantId: participant.id,
      patentsSortId: participant.patents_sort_id,
      sortName: participant.sort_name,
      sortNamesMap: sortNamesMap,
      hasSortName: !!participant.sort_name
    });
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback
    return `–°–æ—Ä—Ç #${participant.patents_sort_id}`;
  };

  // –ë–µ—Ä–µ–º –∫—É–ª—å—Ç—É—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ trialPlan.cultures —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
  const cultureData: CultureData[] = useMemo(() => {
    const plan = trialPlan as any; // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞
    if (!plan?.cultures) return [];

    return plan.cultures.map((culture: any) => ({
      id: culture.id,
      culture: culture.culture,
      culture_name: culture.culture_name,
      culture_group: culture.culture_group,
      trial_types: culture.trial_types || [],
    }));
  }, [trialPlan]);

  // –§—É–Ω–∫—Ü–∏–∏-—Ö–µ–ª–ø–µ—Ä—ã (–æ–±—ã—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–µ useMemo)
  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É: —Ä–µ–≥–∏–æ–Ω—ã —Å –∏—Ö –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º–∏
  const getRegionsWithPredecessors = (participants: ParticipantWithTrials[]) => {
    // Map: region_id -> Set of predecessors
    const regionPredMap = new Map<number, { name: string; predecessors: Set<string> }>();
    
    participants.forEach(p => {
      p.trials.forEach(t => {
        const predName = t.predecessor_culture_name || getPredecessorName(t.predecessor);
        
        if (!regionPredMap.has(t.region_id)) {
          regionPredMap.set(t.region_id, {
            name: t.region_name,
            predecessors: new Set(),
          });
        }
        
        regionPredMap.get(t.region_id)!.predecessors.add(predName);
      });
    });
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∞—Å—Å–∏–≤ —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
    const result = Array.from(regionPredMap.entries()).map(([region_id, data]) => ({
      region_id,
      region_name: data.name,
      predecessors: Array.from(data.predecessors).sort(),
    }));
    
    console.log('üìç –†–µ–≥–∏–æ–Ω—ã —Å –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞–º–∏:', result);
    return result;
  };

  const getCommonPredecessor = (participants: ParticipantWithTrials[], regionId: number): string => {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ trials –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
    const regionTrials = participants
      .flatMap(p => p.trials)
      .filter(t => t.region_id === regionId);
    
    if (regionTrials.length === 0) return '‚Äî';
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
    const predecessorCounts = new Map<string, number>();
    regionTrials.forEach(trial => {
      const predName = trial.predecessor_culture_name || getPredecessorName(trial.predecessor);
      predecessorCounts.set(predName, (predecessorCounts.get(predName) || 0) + 1);
    });
    
    // –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫
    let mostCommon = '‚Äî';
    let maxCount = 0;
    predecessorCounts.forEach((count, predName) => {
      if (count > maxCount) {
        maxCount = count;
        mostCommon = predName;
      }
    });
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
    const allPredecessors = Array.from(predecessorCounts.keys());
    if (allPredecessors.length > 1) {
      return allPredecessors.join(' / ');
    }
    
    return mostCommon;
  };

  const getCommonSeedingRate = (participants: ParticipantWithTrials[], regionId: number): string => {
    const trial = participants
      .flatMap(p => p.trials)
      .find(t => t.region_id === regionId);
    return trial ? `${trial.seeding_rate}` : '‚Äî';
  };

  const groupByMaturity = (participants: ParticipantWithTrials[]) => {
    const groups = new Map<string, ParticipantWithTrials[]>();

    participants.forEach(p => {
      const group = p.maturity_group || '–ù–µ —É–∫–∞–∑–∞–Ω–∞';
      if (!groups.has(group)) {
        groups.set(group, []);
      }
      groups.get(group)!.push(p);
    });

    return Array.from(groups.entries()).map(([group, items]) => ({
      group,
      participants: items.sort((a, b) => a.participant_number - b.participant_number),
    }));
  };

  const getSeedsIcon = (provision: string) => {
    switch (provision) {
      case 'provided': return '‚úÖ';
      case 'imported': return 'üì¶';
      case 'purchased': return 'üõí';
      default: return '‚ùå';
    }
  };

  // –§—É–Ω–∫—Ü–∏–∏-—Ö–µ–ª–ø–µ—Ä—ã –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π (–Ω–µ useMemo)
  const getAllMaturityGroups = () => {
    const groups = new Set<string>();
    cultureData.forEach(c => {
      c.trial_types.forEach(tt => {
        tt.participants.forEach(p => {
          if (p.maturity_group) groups.add(p.maturity_group);
        });
      });
    });
    return Array.from(groups).sort();
  };

  const getStats = () => {
    let totalParticipants = 0;
    let standards = 0;
    let totalTrials = 0;
    
    cultureData.forEach(c => {
      c.trial_types.forEach(tt => {
        tt.participants.forEach(p => {
          totalParticipants++;
          if (p.statistical_group === 0) standards++;
          totalTrials += p.trials.length;
        });
      });
    });
    
    const tested = totalParticipants - standards;
    const cultures = cultureData.length;

    return { totalParticipants, standards, tested, totalTrials, cultures };
  };

  const handleDelete = () => {
    if (trialPlan && window.confirm(`–£–¥–∞–ª–∏—Ç—å –ø–ª–∞–Ω "${trialPlan.oblast_name} ${trialPlan.year}"?`)) {
      deleteTrialPlan.mutate(Number(id), {
        onSuccess: () => {
          enqueueSnackbar('–ü–ª–∞–Ω —É–¥–∞–ª–µ–Ω', { variant: 'success' });
          navigate('/trial-plans');
        },
      });
    }
  };

  if (isLoading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
        <CircularProgress />
      </Box>
    );
  }

  if (error || !trialPlan) {
    return <Alert severity="error">–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–ª–∞–Ω–∞</Alert>;
  }

  // –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ useMemo)
  const allMaturityGroups = getAllMaturityGroups();
  const stats = getStats();

  return (
    <Box>
      {/* Header */}
      <Box mb={3}>
          <Button
            variant="text"
            startIcon={<ArrowBackIcon />}
            onClick={() => navigate('/trial-plans')}
          sx={{ mb: 2 }}
          >
            –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É
          </Button>

        <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
          <Box>
            <Typography variant="h4" gutterBottom>
              üìã –ü–ª–∞–Ω {trialPlan.year} | {typeof trialPlan.oblast === 'number' ? trialPlan.oblast_name : trialPlan.oblast.name}
            </Typography>
            <Typography variant="body2" color="text.secondary">
              –ö—É–ª—å—Ç—É—Ä: {stats.cultures} | 
              –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats.totalParticipants} (–°—Ç:{stats.standards} | –ò—Å–ø:{stats.tested}) | 
              Trials: {stats.totalTrials}
            </Typography>
          </Box>

        <Stack direction="row" spacing={1}>
            <Tooltip title="–î–æ–±–∞–≤–∏—Ç—å –∫—É–ª—å—Ç—É—Ä—É">
            <Button
              variant="outlined"
                startIcon={<AddIcon />}
                onClick={() => setAddCultureDialogOpen(true)}
            >
                –î–æ–±–∞–≤–∏—Ç—å –∫—É–ª—å—Ç—É—Ä—É
            </Button>
          </Tooltip>
            <Tooltip title="–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel">
              <IconButton>
                <ExportIcon />
              </IconButton>
          </Tooltip>
          <Button
            variant="outlined"
            color="error"
            startIcon={<DeleteIcon />}
            onClick={handleDelete}
          >
              –£–¥–∞–ª–∏—Ç—å –ø–ª–∞–Ω
          </Button>
          </Stack>
        </Stack>
      </Box>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      {cultureData.length > 0 && (
        <Card sx={{ mb: 3 }}>
          <CardContent>
            <Stack direction="row" spacing={2}>
              <FormControl size="small" sx={{ minWidth: 200 }}>
                <InputLabel>–ö—É–ª—å—Ç—É—Ä–∞</InputLabel>
                <Select
                  value={filterCulture}
                  label="–ö—É–ª—å—Ç—É—Ä–∞"
                  onChange={(e) => setFilterCulture(e.target.value === '' ? '' : Number(e.target.value))}
                >
                  <MenuItem value="">–í—Å–µ –∫—É–ª—å—Ç—É—Ä—ã</MenuItem>
                  {cultureData.map(c => (
                    <MenuItem key={c.culture} value={c.culture}>
                      {c.culture_name}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>

              <FormControl size="small" sx={{ minWidth: 200 }}>
                <InputLabel>–ì—Ä—É–ø–ø–∞ —Å–ø–µ–ª–æ—Å—Ç–∏</InputLabel>
                <Select
                  value={filterMaturityGroup}
                  label="–ì—Ä—É–ø–ø–∞ —Å–ø–µ–ª–æ—Å—Ç–∏"
                  onChange={(e) => setFilterMaturityGroup(e.target.value)}
                >
                  <MenuItem value="">–í—Å–µ –≥—Ä—É–ø–ø—ã</MenuItem>
                  {allMaturityGroups.map(g => (
                    <MenuItem key={g} value={g}>{g}</MenuItem>
                  ))}
                </Select>
              </FormControl>

              <Button
                size="small"
                onClick={() => {
                  setFilterCulture('');
                  setFilterMaturityGroup('');
                }}
              >
                –°–±—Ä–æ—Å–∏—Ç—å
              </Button>
            </Stack>
          </CardContent>
        </Card>
      )}

      {/* –¢–∞–±–ª–∏—Ü—ã –ø–æ –∫—É–ª—å—Ç—É—Ä–∞–º –∏ —Ç–∏–ø–∞–º –∏—Å–ø—ã—Ç–∞–Ω–∏–π */}
      {cultureData.length === 0 ? (
        <Card>
          <CardContent>
            <Alert severity="info">
              –ü–ª–∞–Ω –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –∫—É–ª—å—Ç—É—Ä—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.
            </Alert>
          </CardContent>
        </Card>
      ) : (
        cultureData.map(culture => (
          <Card key={culture.culture} sx={{ mb: 3 }}>
            <CardContent>
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫—É–ª—å—Ç—É—Ä—ã */}
              <Box mb={2} display="flex" justifyContent="space-between" alignItems="center">
                <Stack direction="row" spacing={2} alignItems="center">
                  <Typography variant="h6">
                    üåæ {culture.culture_name}
                  </Typography>
                  <Chip label={culture.culture_group} color="info" size="small" />
                </Stack>
                <Button
                  variant="outlined"
                  size="small"
                  startIcon={<AddIcon />}
                  onClick={() => {
                    setSelectedCultureForTrialType({
                      cultureId: culture.culture,
                      cultureName: culture.culture_name,
                    });
                    setAddTrialTypeDialogOpen(true);
                  }}
                >
                  –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø –∏—Å–ø—ã—Ç–∞–Ω–∏—è
                </Button>
              </Box>

              <Divider sx={{ mb: 2 }} />

              {/* –¢–∞–±–ª–∏—Ü—ã –ø–æ —Ç–∏–ø–∞–º –∏—Å–ø—ã—Ç–∞–Ω–∏–π */}
              {culture.trial_types.length === 0 ? (
                <Alert severity="info">
                  –¢–∏–ø—ã –∏—Å–ø—ã—Ç–∞–Ω–∏–π –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø –∏—Å–ø—ã—Ç–∞–Ω–∏—è" –≤—ã—à–µ.
                </Alert>
              ) : (
                culture.trial_types.map(trialType => {
                  const regionsWithPreds = getRegionsWithPredecessors(trialType.participants);
                  const maturityGroups = groupByMaturity(trialType.participants);
                  const hasParticipants = trialType.participants.length > 0;
                  
                  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤
                  const totalPredColumns = regionsWithPreds.reduce((sum, r) => sum + r.predecessors.length, 0);

                  return (
                    <Box key={trialType.id} sx={{ mb: 3 }}>
                      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∏–ø–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏—è */}
                      <Box mb={2} display="flex" justifyContent="space-between" alignItems="center">
                        <Stack direction="row" spacing={2} alignItems="center">
                          <Typography variant="h6" color="primary">
                            üìã {trialType.trial_type_name}
                          </Typography>
                          <Chip label={`–°–µ–∑–æ–Ω: ${trialType.season}`} color="secondary" size="small" />
                          <Chip label={`–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${trialType.participants.length}`} variant="outlined" size="small" />
                        </Stack>
                        <Button
                          variant="outlined"
                          size="small"
                          startIcon={<AddIcon />}
                          onClick={() => {
                            setSelectedCultureForParticipants({
                              oblastId: typeof trialPlan.oblast === 'number' ? trialPlan.oblast : trialPlan.oblast.id,
                              cultureId: culture.culture,
                              cultureName: culture.culture_name,
                              trialTypeId: trialType.trial_type_id,
                            });
                            setAddParticipantsDialogOpen(true);
                          }}
                        >
                          –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                        </Button>
                      </Box>

                      {/* –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
                      {!hasParticipants ? (
                        <Alert severity="info">
                          –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –ù–∞–∂–º–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤" –≤—ã—à–µ.
                        </Alert>
                      ) : (
                        <TableContainer component={Paper} variant="outlined">
                          <Table size="small">
                            <TableHead>
                              {/* –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –ù–∞–∑–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤ */}
                              <TableRow>
                                <TableCell rowSpan={3} sx={{ fontWeight: 'bold', minWidth: 50 }}>‚Ññ</TableCell>
                                <TableCell rowSpan={3} sx={{ fontWeight: 'bold', minWidth: 200 }}>–°–æ—Ä—Ç</TableCell>
                                <TableCell rowSpan={3} sx={{ fontWeight: 'bold', minWidth: 80 }}>–ì–æ–¥</TableCell>
                                
                                {regionsWithPreds.map(region => (
                                  <TableCell 
                                    key={region.region_id} 
                                    colSpan={region.predecessors.length} 
                                    align="center" 
                                    sx={{ fontWeight: 'bold', bgcolor: 'primary.light', color: 'white' }}
                                  >
                                    {region.region_name}
                                  </TableCell>
                                ))}
                                
                                <TableCell rowSpan={3} align="center" sx={{ fontWeight: 'bold', minWidth: 80 }}>–í—Å–µ–≥–æ</TableCell>
                                <TableCell rowSpan={3} align="center" sx={{ fontWeight: 'bold', minWidth: 100 }}>–°–µ–º–µ–Ω–∞</TableCell>
                              </TableRow>
                              
                              {/* –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –ü—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ */}
                              <TableRow>
                                {regionsWithPreds.map(region => 
                                  region.predecessors.map((pred, idx) => (
                                    <TableCell 
                                      key={`${region.region_id}-pred-${idx}`} 
                                      align="center" 
                                      sx={{ fontSize: '0.75rem', fontWeight: 600, bgcolor: 'grey.100' }}
                                    >
                                      {pred}
                                    </TableCell>
                                  ))
                                )}
                              </TableRow>
                              
                              {/* –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ - –ù–æ—Ä–º–∞ –≤—ã—Å–µ–≤–∞ */}
                              <TableRow>
                                {regionsWithPreds.map(region => 
                                  region.predecessors.map((pred, idx) => (
                                    <TableCell 
                                      key={`${region.region_id}-rate-${idx}`} 
                                      align="center" 
                                      sx={{ fontSize: '0.75rem', bgcolor: 'grey.50' }}
                                    >
                                      {getCommonSeedingRate(trialType.participants, region.region_id)}
                                    </TableCell>
                                  ))
                                )}
                              </TableRow>
                            </TableHead>
                            <TableBody>
                              {maturityGroups.map(({ group, participants }) => (
                                <React.Fragment key={group}>
                                  {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã —Å–ø–µ–ª–æ—Å—Ç–∏ */}
                                  <TableRow>
                                    <TableCell 
                                      colSpan={totalPredColumns + 5} 
                                      sx={{
                                        bgcolor: 'grey.100', 
                                        fontWeight: 'bold',
                                        fontSize: '0.875rem',
                                        py: 0.5,
                                      }}
                                    >
                                      {group}
                                    </TableCell>
                                  </TableRow>

                                  {/* –£—á–∞—Å—Ç–Ω–∏–∫–∏ */}
                                  {participants.map((participant, idx) => {
                                    return (
                                      <TableRow key={participant.id} hover>
                                        <TableCell>{idx + 1}</TableCell>
                                        <TableCell>
                                          <Box display="flex" alignItems="center" gap={1}>
                                            <Typography variant="body2" fontWeight={500}>
                                              {getSortName(participant)}
                                            </Typography>
                                            {isLoadingSortNames && !participant.sort_name && (
                                              <CircularProgress size={12} />
                                            )}
                                            {participant.application && (
                                              <Chip 
                                                label={`–ó–∞—è–≤–∫–∞ #${participant.application}`} 
                                                size="small"
                                                variant="outlined"
                                                sx={{ ml: 1 }}
                                              />
                                            )}
                                          </Box>
                                        </TableCell>
                                        <TableCell>{participant.application_submit_year || participant.year_started || '‚Äî'}</TableCell>

                                        {regionsWithPreds.map(region => 
                                          region.predecessors.map((pred, predIdx) => {
                                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ trial —Å —ç—Ç–∏–º —Ä–µ–≥–∏–æ–Ω–æ–º –ò —ç—Ç–∏–º –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–º
                                            const matchingTrial = participant.trials.find(t => {
                                              const predName = t.predecessor_culture_name || getPredecessorName(t.predecessor);
                                              return t.region_id === region.region_id && predName === pred;
                                            });
                                            
                                            return (
                                              <TableCell key={`${region.region_id}-${pred}-${predIdx}`} align="center">
                                                {matchingTrial ? (
                                                  <Typography variant="body2" fontWeight={600}>
                                                    –• {participant.statistical_group === 0 ? '—Å—Ç' : participant.statistical_group === 1 ? '' : '–±/—Å—Ç'}
                                                  </Typography>
                                                ) : (
                                                  <Typography variant="body2" color="text.disabled">‚Äî</Typography>
                                                )}
                                              </TableCell>
                                            );
                                          })
                                        )}

                                        <TableCell align="center">{participant.trials.length}</TableCell>
                                        <TableCell align="center">{getSeedsIcon(participant.seeds_provision)}</TableCell>
                                      </TableRow>
                                    );
                                  })}
                                </React.Fragment>
                              ))}
                            </TableBody>
                          </Table>
                        </TableContainer>
                      )}
                    </Box>
                  );
                })
              )}
            </CardContent>
          </Card>
        ))
      )}

      {/* –î–∏–∞–ª–æ–≥–∏ */}
      <AddCultureToPlanDialog
        open={addCultureDialogOpen}
        onClose={() => setAddCultureDialogOpen(false)}
        trialPlanId={Number(id)}
        existingCultureIds={cultureData.map(c => c.culture)}
      />

      {selectedCultureForParticipants && (
        <AddParticipantsToPlanDialog
          open={addParticipantsDialogOpen}
          onClose={() => {
            setAddParticipantsDialogOpen(false);
            setSelectedCultureForParticipants(null);
          }}
          trialPlanId={Number(id)}
          oblastId={selectedCultureForParticipants.oblastId}
          cultureId={selectedCultureForParticipants.cultureId}
          trialTypeId={selectedCultureForParticipants.trialTypeId}
          cultureName={selectedCultureForParticipants.cultureName}
        />
      )}

      {selectedCultureForTrialType && (
        <AddTrialTypeToCultureDialog
          open={addTrialTypeDialogOpen}
          onClose={() => {
            setAddTrialTypeDialogOpen(false);
            setSelectedCultureForTrialType(null);
          }}
          trialPlanId={Number(id)}
          cultureId={selectedCultureForTrialType.cultureId}
          cultureName={selectedCultureForTrialType.cultureName}
          existingTrialTypeIds={cultureData
            .find(c => c.culture === selectedCultureForTrialType.cultureId)
            ?.trial_types.map(tt => tt.trial_type_id) || []}
        />
      )}
    </Box>
  );
};

export default TrialPlanDetail;
