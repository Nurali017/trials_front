import React, { useState, useEffect } from 'react';
import {
  Box,
  Typography,
  Paper,
  Button,
  TextField,
  Grid,
  Stepper,
  Step,
  StepLabel,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Alert,
  CircularProgress,
  RadioGroup,
  FormControlLabel,
  Radio,
  Card,
  CardContent,
  Chip,
} from '@mui/material';
import { useNavigate } from 'react-router-dom';
import { useSnackbar } from 'notistack';
import { useRegions, useOblasts, useSortRecords } from '@/hooks/useDictionaries';
import { useTrialTypes } from '@/hooks/useTrials';
import { useCulturesForRegion, usePendingApplicationsForRegion } from '@/hooks/useApplications';
import { trialsService } from '@/api';
import { getTodayISO } from '@/utils/dateHelpers';
import { ParticipantSelector } from '@/components/forms/ParticipantSelector';
import type {
  StatisticalGroup,
  PlantingSeason,
  AgroBackground,
  GrowingConditions,
  CultivationTechnology,
  GrowingMethod,
  HarvestTiming,
} from '@/types/api.types';

interface SuggestedParticipant {
  application_id: number;
  application_number: string;
  sort_record: number; // Trials ID
  patents_sort_id?: number; // Patents ID
  sort_name: string;
}

interface ParticipantFormItem {
  id: string;
  sort_record: number | null;
  statistical_group: StatisticalGroup;
  participant_number: number;
  application?: number;
}

const steps = ['–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–£—á–∞—Å—Ç–Ω–∏–∫–∏'];

export const TrialCreate: React.FC = () => {
  const navigate = useNavigate();
  const { enqueueSnackbar } = useSnackbar();

  const [activeStep, setActiveStep] = useState(0);
  const [isSubmitting, setIsSubmitting] = useState(false);

  // Step 1: Basic info - –ù–û–í–´–ô –ü–û–†–Ø–î–û–ö!
  const [oblast, setOblast] = useState<number | ''>('');
  const [region, setRegion] = useState<number | ''>('');
  const [culture, setCulture] = useState<number | ''>('');
  const [trialType, setTrialType] = useState<number | ''>('');
  const [startDate, setStartDate] = useState(getTodayISO());
  const [areaHa, setAreaHa] = useState<number | ''>(0.025);
  const [plantingSeason, setPlantingSeason] = useState<PlantingSeason | ''>('');
  const [responsiblePerson, setResponsiblePerson] = useState<string>('');
  const [description, setDescription] = useState<string>('');

  // –ê–≥—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  const [agroBackground, setAgroBackground] = useState<AgroBackground | ''>('');
  const [growingConditions, setGrowingConditions] = useState<GrowingConditions | ''>('');
  const [cultivationTechnology, setCultivationTechnology] = useState<CultivationTechnology | ''>('');
  const [growingMethod, setGrowingMethod] = useState<GrowingMethod | ''>('');
  const [harvestTiming, setHarvestTiming] = useState<HarvestTiming | ''>('');

  // Step 2: Participants
  const [participants, setParticipants] = useState<ParticipantFormItem[]>([]);
  const [suggestedParticipants, setSuggestedParticipants] = useState<SuggestedParticipant[]>([]);

  // Data fetching
  const { data: oblasts } = useOblasts();
  const { data: allRegions } = useRegions();
  const { data: trialTypes } = useTrialTypes();
  const { data: sortRecords } = useSortRecords(
    culture ? { culture: Number(culture) } : undefined,
    !!culture // enabled —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ culture –≤—ã–±—Ä–∞–Ω–∞
  );
  
  // –ù–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
  const { data: culturesData, isLoading: loadingCultures } = useCulturesForRegion(
    region ? Number(region) : null
  );
  const { data: pendingApplications } = usePendingApplicationsForRegion(
    region ? Number(region) : null,
    culture ? Number(culture) : null
  );

  const oblastsArray = oblasts || [];
  const trialTypesArray = trialTypes || [];
  const sortsArray = sortRecords || [];
  
  // –§–∏–ª—å—Ç—Ä —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ –æ–±–ª–∞—Å—Ç–∏
  const regionsArray = allRegions?.filter(r => !oblast || r.oblast === oblast) || [];

  // –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–±–ª–∞—Å—Ç–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Ä–µ–≥–∏–æ–Ω
  useEffect(() => {
    if (oblast) {
      setRegion('');
      setCulture('');
    }
  }, [oblast]);

  // –ü—Ä–∏ –≤—ã–±–æ—Ä–µ —Ä–µ–≥–∏–æ–Ω–∞ —Å–±—Ä–æ—Å–∏—Ç—å –∫—É–ª—å—Ç—É—Ä—É
  useEffect(() => {
    if (region) {
      setCulture('');
    }
  }, [region]);

  // –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ - —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  useEffect(() => {
    if (pendingApplications?.applications) {
      const suggested: SuggestedParticipant[] = pendingApplications.applications
        .filter(app => !app.already_in_trial && 
          (typeof app.sort_record.culture === 'object' 
            ? app.sort_record.culture.id === Number(culture)
            : app.sort_record.culture === Number(culture)))
        .map(app => {
          const sortRecord = app.sort_record as any;
          return {
            application_id: app.id,
            application_number: app.application_number,
            sort_record: sortRecord.id, // Trials ID
            patents_sort_id: sortRecord.sort_id, // Patents ID
            sort_name: sortRecord.name,
          };
        });
      
      setSuggestedParticipants(suggested);
    }
  }, [pendingApplications, culture]);


  const handleNext = () => {
    // Validation for each step
    if (activeStep === 0) {
      if (!oblast || !region || !culture) {
        enqueueSnackbar('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å, –ì–°–£ –∏ –∫—É–ª—å—Ç—É—Ä—É', { variant: 'warning' });
        return;
      }
    }

    if (activeStep === 1) {
      if (participants.length === 0) {
        enqueueSnackbar('–î–æ–±–∞–≤—å—Ç–µ –º–∏–Ω–∏–º—É–º 1 —É—á–∞—Å—Ç–Ω–∏–∫–∞', { variant: 'warning' });
        return;
      }

      const hasStandard = participants.some(p => p.statistical_group === 0);
      if (!hasStandard) {
        enqueueSnackbar('–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º 1 —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–æ—Ä—Ç', { variant: 'error' });
        return;
      }

      const hasInvalidSort = participants.some(p => !p.sort_record);
      if (hasInvalidSort) {
        enqueueSnackbar('–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ä—Ç –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', { variant: 'warning' });
        return;
      }
    }

    setActiveStep((prev) => prev + 1);
  };

  const handleBack = () => {
    setActiveStep((prev) => prev - 1);
  };

  const handleSubmit = async () => {
    setIsSubmitting(true);

    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: Autocomplete ‚Üí sort_record, –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ ‚Üí sort_id
      const allParticipants = participants.map((p) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ sort_record –Ω–µ null
        if (!p.sort_record) {
          throw new Error(`–£—á–∞—Å—Ç–Ω–∏–∫ ‚Ññ${p.participant_number} –Ω–µ –∏–º–µ–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ä—Ç–∞`);
        }

        // –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –∏–∑ –∑–∞—è–≤–∫–∏ (–µ—Å—Ç—å application) - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º patents_sort_id (Patents ID)
        if (p.application) {
          // –ù–∞—Ö–æ–¥–∏–º –≤ suggestedParticipants –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è Patents ID
          const suggested = suggestedParticipants.find(s => s.application_id === p.application);
          if (!suggested) {
            throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ ‚Ññ${p.participant_number}`);
          }
          return {
            patents_sort_id: suggested.patents_sort_id, // Patents ID –∏–∑ –∑–∞—è–≤–∫–∏
            statistical_group: p.statistical_group,
            participant_number: p.participant_number,
            application: p.application,
          };
        }

        // –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –≤—ã–±—Ä–∞–Ω –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ Autocomplete - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º patents_sort_id (Patents ID)
        const sortData = sortsArray.find(s => s.id === p.sort_record);
        if (!sortData) {
          throw new Error(`–°–æ—Ä—Ç —Å ID ${p.sort_record} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ—Ä—Ç–∞—Ö`);
        }
        
        return {
          patents_sort_id: p.sort_record, // Patents ID –∏–∑ Autocomplete
          statistical_group: p.statistical_group,
          participant_number: p.participant_number,
        };
      });

      const payload = {
        culture: Number(culture),
        region: Number(region),
        trial_type: trialType ? Number(trialType) : undefined,
        start_date: startDate,
        area_ha: areaHa === '' ? undefined : areaHa,
        planting_season: plantingSeason || undefined,
        responsible_person: responsiblePerson || undefined,
        description: description || undefined,

        // –ê–≥—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        agro_background: agroBackground || undefined,
        growing_conditions: growingConditions || undefined,
        cultivation_technology: cultivationTechnology || undefined,
        growing_method: growingMethod || undefined,
        harvest_timing: harvestTiming || undefined,

        participants: allParticipants,
        // indicators –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º - –±—ç–∫–µ–Ω–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∑–∏—Ç –≤—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –∫—É–ª—å—Ç—É—Ä—ã
        indicators: undefined,
      };

      console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º payload:', JSON.stringify(payload, null, 2));
      const trial = await trialsService.create(payload);

      enqueueSnackbar('–°–æ—Ä—Ç–æ–æ–ø—ã—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', { variant: 'success' });
      navigate(`/trials/${trial.id}`);
    } catch (error: any) {
      enqueueSnackbar(
        `–û—à–∏–±–∫–∞: ${error.response?.data?.message || error.message}`,
        { variant: 'error' }
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Box>
      <Typography variant="h4" fontWeight="bold" gutterBottom>
        –°–æ–∑–¥–∞—Ç—å —Å–æ—Ä—Ç–æ–æ–ø—ã—Ç
      </Typography>
      <Typography variant="body1" color="text.secondary" gutterBottom sx={{ mb: 3 }}>
        –°–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏
      </Typography>

      <Paper sx={{ p: 3, mb: 3 }}>
        <Stepper activeStep={activeStep} sx={{ mb: 4 }}>
          {steps.map((label) => (
            <Step key={label}>
              <StepLabel>{label}</StepLabel>
            </Step>
          ))}
        </Stepper>

        {/* Step 1: Basic Info - –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê */}
        {activeStep === 0 && (
          <Box>
            <Grid container spacing={3}>
              {/* –û–ë–õ–ê–°–¢–¨ - –ü–ï–†–í–û–ï –ü–û–õ–ï */}
              <Grid item xs={12} md={6}>
                <FormControl fullWidth required>
                  <InputLabel>–û–±–ª–∞—Å—Ç—å</InputLabel>
                  <Select
                    value={oblast}
                    label="–û–±–ª–∞—Å—Ç—å"
                    onChange={(e) => setOblast(e.target.value as number | '')}
                  >
                    <MenuItem value="">–í—ã–±–µ—Ä–∏—Ç–µ...</MenuItem>
                    {oblastsArray.map((obl) => (
                      <MenuItem key={obl.id} value={obl.id}>
                        {obl.name}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>

              {/* –ì–°–£ - –í–¢–û–†–û–ï –ü–û–õ–ï */}
              <Grid item xs={12} md={6}>
                <FormControl fullWidth required disabled={!oblast}>
                  <InputLabel>–ì–°–£ (–°–æ—Ä—Ç–æ—É—á–∞—Å—Ç–æ–∫)</InputLabel>
                  <Select
                    value={region}
                    label="–ì–°–£ (–°–æ—Ä—Ç–æ—É—á–∞—Å—Ç–æ–∫)"
                    onChange={(e) => setRegion(e.target.value as number | '')}
                  >
                    <MenuItem value="">–í—ã–±–µ—Ä–∏—Ç–µ...</MenuItem>
                    {regionsArray.map((reg) => (
                      <MenuItem key={reg.id} value={reg.id}>
                        {reg.name}
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>

              {/* –ö–£–õ–¨–¢–£–†–ê - –¢–†–ï–¢–¨–ï –ü–û–õ–ï (–∏–∑ API) */}
              <Grid item xs={12}>
                <FormControl fullWidth required disabled={!region}>
                  <Typography variant="subtitle2" gutterBottom>
                    –ö—É–ª—å—Ç—É—Ä–∞ *
                  </Typography>
                  {loadingCultures ? (
                    <Box display="flex" alignItems="center" gap={2}>
                      <CircularProgress size={20} />
                      <Typography variant="body2">–ó–∞–≥—Ä—É–∑–∫–∞ –∫—É–ª—å—Ç—É—Ä...</Typography>
                    </Box>
                  ) : culturesData && culturesData.cultures.length > 0 ? (
                    <RadioGroup
                      value={culture}
                      onChange={(e) => setCulture(Number(e.target.value))}
                    >
                      {culturesData.cultures.map((cult) => (
                        <Card 
                          key={cult.culture_id} 
                          variant="outlined" 
                          onClick={() => setCulture(cult.culture_id)}
                          sx={{ 
                            mb: 1,
                            cursor: 'pointer',
                            transition: 'all 0.2s',
                            border: culture === cult.culture_id ? 2 : 1,
                            borderColor: culture === cult.culture_id ? 'primary.main' : 'divider',
                            bgcolor: culture === cult.culture_id ? 'primary.50' : 'transparent',
                            '&:hover': {
                              borderColor: 'primary.main',
                              bgcolor: culture === cult.culture_id ? 'primary.50' : 'action.hover',
                            }
                          }}
                        >
                          <CardContent sx={{ p: 2, '&:last-child': { pb: 2 } }}>
                            <FormControlLabel
                              value={cult.culture_id}
                              control={<Radio />}
                              label={
                                <Box>
                                  <Typography variant="body1" fontWeight={500}>
                                    {cult.culture_name}
                                  </Typography>
                                  <Box display="flex" gap={1} mt={0.5}>
                                    <Chip 
                                      label={`–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: ${cult.applications_count}`} 
                                      size="small" 
                                    />
                                    <Chip 
                                      label={`–û–∂–∏–¥–∞—é—Ç: ${cult.pending_count}`} 
                                      size="small"
                                      color="primary"
                                    />
                                    {cult.in_trial_count > 0 && (
                                      <Chip 
                                        label={`–í –∏—Å–ø—ã—Ç–∞–Ω–∏—è—Ö: ${cult.in_trial_count}`} 
                                        size="small"
                                        color="success"
                                      />
                                    )}
                                  </Box>
                                  {cult.sample_applications.length > 0 && (
                                    <Typography variant="caption" color="text.secondary">
                                      –ü—Ä–∏–º–µ—Ä—ã: {cult.sample_applications.join(', ')}
                                    </Typography>
                                  )}
                                </Box>
                              }
                            />
                          </CardContent>
                        </Card>
                      ))}
                    </RadioGroup>
                  ) : region ? (
                    <Alert severity="warning">
                      –ù–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ì–°–£. –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∑–∞—è–≤–∫–∏ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª "–ó–∞—è–≤–∫–∏".
                    </Alert>
                  ) : (
                    <Typography variant="body2" color="text.secondary">
                      –í—ã–±–µ—Ä–∏—Ç–µ –ì–°–£ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É–ª—å—Ç—É—Ä
                    </Typography>
                  )}
                </FormControl>
              </Grid>

              {/* –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è */}
              <Grid item xs={12} md={6}>
                <FormControl fullWidth>
                  <InputLabel>–¢–∏–ø –∏—Å–ø—ã—Ç–∞–Ω–∏—è</InputLabel>
                  <Select
                    value={trialType}
                    label="–¢–∏–ø –∏—Å–ø—ã—Ç–∞–Ω–∏—è"
                    onChange={(e) => setTrialType(e.target.value as number | '')}
                  >
                    <MenuItem value="">–ù–µ —É–∫–∞–∑–∞–Ω</MenuItem>
                    {trialTypesArray.map((type: any) => (
                      <MenuItem key={type.id} value={type.id}>
                        {type.name} ({type.category_display})
                      </MenuItem>
                    ))}
                  </Select>
                </FormControl>
              </Grid>

              <Grid item xs={12} md={6}>
                <TextField
                  label="–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞"
                  type="date"
                  fullWidth
                  required
                  value={startDate}
                  onChange={(e) => setStartDate(e.target.value)}
                  InputLabelProps={{ shrink: true }}
                />
              </Grid>

              <Grid item xs={12} md={6}>
                <TextField
                  label="–ü–ª–æ—â–∞–¥—å (–≥–∞)"
                  type="number"
                  fullWidth
                  value={areaHa}
                  onChange={(e) => {
                    const value = e.target.value;
                    setAreaHa(value === '' ? '' : parseFloat(value));
                  }}
                  inputProps={{ step: 0.001, min: 0 }}
                  helperText="–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø–ª–æ—â–∞–¥—å: 0.025 –≥–∞"
                />
              </Grid>

              <Grid item xs={12} md={6}>
                <FormControl fullWidth>
                  <InputLabel>–°–µ–∑–æ–Ω –ø–æ—Å–∞–¥–∫–∏</InputLabel>
                  <Select
                    value={plantingSeason}
                    label="–°–µ–∑–æ–Ω –ø–æ—Å–∞–¥–∫–∏"
                    onChange={(e) => setPlantingSeason(e.target.value as PlantingSeason | '')}
                  >
                    <MenuItem value="">–ù–µ —É–∫–∞–∑–∞–Ω</MenuItem>
                    <MenuItem value="spring">–í–µ—Å–µ–Ω–Ω–∏–π</MenuItem>
                    <MenuItem value="autumn">–û—Å–µ–Ω–Ω–∏–π</MenuItem>
                  </Select>
                </FormControl>
              </Grid>

              <Grid item xs={12} md={6}>
                <TextField
                  label="–§–ò–û –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ"
                  fullWidth
                  value={responsiblePerson}
                  onChange={(e) => setResponsiblePerson(e.target.value)}
                  placeholder="–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á"
                  helperText="–õ–∏—Ü–æ, –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –∑–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è"
                />
              </Grid>

              <Grid item xs={12}>
                <TextField
                  label="–û–ø–∏—Å–∞–Ω–∏–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è"
                  fullWidth
                  multiline
                  rows={2}
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–µ–π –∏ –∑–∞–¥–∞—á –∏—Å–ø—ã—Ç–∞–Ω–∏—è"
                />
              </Grid>
            </Grid>

            {/* –ê–≥—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã */}
            <Box sx={{ mt: 4 }}>
              <Typography variant="h6" fontWeight="bold" gutterBottom>
                –ê–≥—Ä–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
              </Typography>
              <Grid container spacing={3} sx={{ mt: 1 }}>
                <Grid item xs={12} md={6}>
                  <FormControl fullWidth>
                    <InputLabel>–ê–≥—Ä–æ—Ñ–æ–Ω</InputLabel>
                    <Select
                      value={agroBackground}
                      label="–ê–≥—Ä–æ—Ñ–æ–Ω"
                      onChange={(e) => setAgroBackground(e.target.value as AgroBackground | '')}
                    >
                      <MenuItem value="">–ù–µ —É–∫–∞–∑–∞–Ω</MenuItem>
                      <MenuItem value="favorable">–ë–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π</MenuItem>
                      <MenuItem value="moderate">–£–º–µ—Ä–µ–Ω–Ω—ã–π</MenuItem>
                      <MenuItem value="unfavorable">–ù–µ–±–ª–∞–≥–æ–ø—Ä–∏—è—Ç–Ω—ã–π</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>

                <Grid item xs={12} md={6}>
                  <FormControl fullWidth>
                    <InputLabel>–£—Å–ª–æ–≤–∏—è –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è</InputLabel>
                    <Select
                      value={growingConditions}
                      label="–£—Å–ª–æ–≤–∏—è –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è"
                      onChange={(e) => setGrowingConditions(e.target.value as GrowingConditions | '')}
                    >
                      <MenuItem value="">–ù–µ —É–∫–∞–∑–∞–Ω—ã</MenuItem>
                      <MenuItem value="rainfed">–ë–æ–≥–∞—Ä–∞</MenuItem>
                      <MenuItem value="irrigated">–û—Ä–æ—à–µ–Ω–∏–µ</MenuItem>
                      <MenuItem value="mixed">–°–º–µ—à–∞–Ω–Ω—ã–µ</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>

                <Grid item xs={12} md={6}>
                  <FormControl fullWidth>
                    <InputLabel>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –≤–æ–∑–¥–µ–ª—ã–≤–∞–Ω–∏—è</InputLabel>
                    <Select
                      value={cultivationTechnology}
                      label="–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –≤–æ–∑–¥–µ–ª—ã–≤–∞–Ω–∏—è"
                      onChange={(e) => setCultivationTechnology(e.target.value as CultivationTechnology | '')}
                    >
                      <MenuItem value="">–ù–µ —É–∫–∞–∑–∞–Ω–∞</MenuItem>
                      <MenuItem value="traditional">–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è</MenuItem>
                      <MenuItem value="minimal">–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</MenuItem>
                      <MenuItem value="no_till">No-till (–Ω—É–ª–µ–≤–∞—è)</MenuItem>
                      <MenuItem value="organic">–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>

                <Grid item xs={12} md={6}>
                  <FormControl fullWidth>
                    <InputLabel>–ú–µ—Ç–æ–¥ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è</InputLabel>
                    <Select
                      value={growingMethod}
                      label="–ú–µ—Ç–æ–¥ –≤—ã—Ä–∞—â–∏–≤–∞–Ω–∏—è"
                      onChange={(e) => setGrowingMethod(e.target.value as GrowingMethod | '')}
                    >
                      <MenuItem value="">–ù–µ —É–∫–∞–∑–∞–Ω</MenuItem>
                      <MenuItem value="soil_traditional">–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–µ –≤ –ø–æ—á–≤–µ</MenuItem>
                      <MenuItem value="hydroponics">–ì–∏–¥—Ä–æ–ø–æ–Ω–∏–∫–∞</MenuItem>
                      <MenuItem value="greenhouse">–ó–∞—â–∏—â–µ–Ω–Ω—ã–π –≥—Ä—É–Ω—Ç</MenuItem>
                      <MenuItem value="raised_beds">–ü—Ä–∏–ø–æ–¥–Ω—è—Ç—ã–µ –≥—Ä—è–¥–∫–∏</MenuItem>
                      <MenuItem value="container">–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä–Ω–æ–µ</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>

                <Grid item xs={12} md={6}>
                  <FormControl fullWidth>
                    <InputLabel>–°—Ä–æ–∫ —Å–æ–∑—Ä–µ–≤–∞–Ω–∏—è</InputLabel>
                    <Select
                      value={harvestTiming}
                      label="–°—Ä–æ–∫ —Å–æ–∑—Ä–µ–≤–∞–Ω–∏—è"
                      onChange={(e) => setHarvestTiming(e.target.value as HarvestTiming | '')}
                    >
                      <MenuItem value="">–ù–µ —É–∫–∞–∑–∞–Ω</MenuItem>
                      <MenuItem value="very_early">–û—á–µ–Ω—å —Ä–∞–Ω–Ω–∏–π</MenuItem>
                      <MenuItem value="early">–†–∞–Ω–Ω–∏–π</MenuItem>
                      <MenuItem value="medium_early">–°—Ä–µ–¥–Ω–µ—Ä–∞–Ω–Ω–∏–π</MenuItem>
                      <MenuItem value="medium">–°—Ä–µ–¥–Ω–∏–π</MenuItem>
                      <MenuItem value="medium_late">–°—Ä–µ–¥–Ω–µ–ø–æ–∑–¥–Ω–∏–π</MenuItem>
                      <MenuItem value="late">–ü–æ–∑–¥–Ω–∏–π</MenuItem>
                      <MenuItem value="very_late">–û—á–µ–Ω—å –ø–æ–∑–¥–Ω–∏–π</MenuItem>
                    </Select>
                  </FormControl>
                </Grid>
              </Grid>
            </Box>
          </Box>
        )}

        {/* Step 2: Participants */}
        {activeStep === 1 && culture && (
          <Box>
            <Typography variant="h6" fontWeight="bold" gutterBottom sx={{ mb: 2 }}>
              –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏—è
            </Typography>
            <ParticipantSelector
              cultureId={Number(culture)}
              participants={participants}
              onChange={setParticipants}
              suggestedParticipants={suggestedParticipants}
            />
          </Box>
        )}


        {/* Navigation buttons */}
        <Box display="flex" justifyContent="space-between" mt={4}>
          <Button
            onClick={() => navigate('/trials')}
            disabled={isSubmitting}
          >
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Box display="flex" gap={2}>
            {activeStep > 0 && (
              <Button onClick={handleBack} disabled={isSubmitting}>
                –ù–∞–∑–∞–¥
              </Button>
            )}
            {activeStep < steps.length - 1 ? (
              <Button variant="contained" onClick={handleNext}>
                –î–∞–ª–µ–µ
              </Button>
            ) : (
              <Button
                variant="contained"
                onClick={handleSubmit}
                disabled={isSubmitting}
              >
                {isSubmitting ? <CircularProgress size={24} /> : '–°–æ–∑–¥–∞—Ç—å —Å–æ—Ä—Ç–æ–æ–ø—ã—Ç'}
              </Button>
            )}
          </Box>
        </Box>
      </Paper>

      {/* Summary */}
      {activeStep === 1 && (
        <Paper sx={{ p: 3 }}>
          <Typography variant="h6" fontWeight="bold" gutterBottom>
            –°–≤–æ–¥–∫–∞
          </Typography>
          <Grid container spacing={2}>
            <Grid item xs={12} md={6}>
              <Typography variant="body2" color="text.secondary">–û–±–ª–∞—Å—Ç—å</Typography>
              <Typography variant="body1" fontWeight={500}>
                {oblastsArray.find(o => o.id === oblast)?.name || '-'}
              </Typography>
            </Grid>
            <Grid item xs={12} md={6}>
              <Typography variant="body2" color="text.secondary">–ì–°–£</Typography>
              <Typography variant="body1" fontWeight={500}>
                {regionsArray.find(r => r.id === region)?.name || '-'}
              </Typography>
            </Grid>
            <Grid item xs={12} md={6}>
              <Typography variant="body2" color="text.secondary">–ö—É–ª—å—Ç—É—Ä–∞</Typography>
              <Typography variant="body1" fontWeight={500}>
                {culturesData?.cultures.find(c => c.culture_id === culture)?.culture_name || '-'}
              </Typography>
            </Grid>
            <Grid item xs={12} md={6}>
              <Typography variant="body2" color="text.secondary">–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤</Typography>
              <Typography variant="body1" fontWeight={500}>
                {participants.length}
                {' '}(–∏—Å–ø—ã—Ç—ã–≤–∞–µ–º—ã—Ö: {participants.filter(p => p.statistical_group === 1).length}, 
                —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤: {participants.filter(p => p.statistical_group === 0).length})
              </Typography>
            </Grid>
            <Grid item xs={12}>
              <Alert severity="info" sx={{ mt: 1 }}>
                <Typography variant="body2">
                  üìä <strong>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</strong> –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∑—è—Ç—Å—è –≤—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –∫—É–ª—å—Ç—É—Ä—ã "{culturesData?.cultures.find(c => c.culture_id === culture)?.culture_name}". –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è —Å–æ—Ä—Ç–æ–ø—ã—Ç–æ–º, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ - –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–µ–π.
                </Typography>
              </Alert>
            </Grid>
          </Grid>
        </Paper>
      )}
    </Box>
  );
};
