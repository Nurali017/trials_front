import React from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Grid,
  Typography,
  Alert,
  CircularProgress,
  Box,
  TextField,
  Card,
  CardContent,
  IconButton,
  Stack,
  Chip,
  Divider,
} from '@mui/material';
import {
  Add as AddIcon,
  Delete as DeleteIcon,
  Save as SaveIcon,
} from '@mui/icons-material';
import { useForm, Controller, useFieldArray } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useAddParticipants, useSuggestApplications } from '../../hooks/useTrialPlans';
import { useDictionaries } from '../../hooks/useDictionaries';
import { useQuery } from '@tanstack/react-query';
import apiClient from '../../api/client';
import { useSnackbar } from 'notistack';

// Validation schema –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π (–≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å)
const regionalTrialSchema = z.object({
  region_id: z.union([z.number().min(1, '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω'), z.literal('')]),
  predecessor: z.union([z.string(), z.number()]),
  seeding_rate: z.number().min(0.1, '–ù–æ—Ä–º–∞ –≤—ã—Å–µ–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0'),
  season: z.enum(['spring', 'autumn', 'summer', 'winter']),
  trial_type_id: z.number().optional(),
});

// Validation schema –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
const participantSchema = z.object({
  source_type: z.enum(['application', 'registry']),
  application_id: z.union([z.number(), z.literal('')]).optional(),
  patents_sort_id: z.union([z.number(), z.literal('')]).optional(),
  statistical_group: z.union([z.literal(0), z.literal(1)]),
  seeds_provision: z.enum(['provided', 'imported', 'purchased']),
  maturity_group: z.string().optional(),
});

const addParticipantsSchema = z.object({
  regional_trials: z.array(regionalTrialSchema).min(1, '–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ'),
  participants: z.array(participantSchema).min(1, '–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞'),
});

type AddParticipantsFormData = z.infer<typeof addParticipantsSchema>;

interface AddParticipantsToPlanDialogProps {
  open: boolean;
  onClose: () => void;
  trialPlanId: number;
  oblastId: number; // ID –æ–±–ª–∞—Å—Ç–∏ –∏–∑ –ø–ª–∞–Ω–∞
  cultureId: number; // ID –∫—É–ª—å—Ç—É—Ä—ã –∏–∑ Patents Service
  trialTypeId: number;
  cultureName?: string;
}

export const AddParticipantsToPlanDialog: React.FC<AddParticipantsToPlanDialogProps> = ({
  open,
  onClose,
  trialPlanId,
  oblastId,
  cultureId,
  cultureName,
}) => {
  const addParticipants = useAddParticipants();
  const dictionaries = useDictionaries();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞—è–≤–∫–∏ –¥–ª—è –∫—É–ª—å—Ç—É—Ä—ã –∏ –æ–±–ª–∞—Å—Ç–∏
  const { data: applicationsData } = useSuggestApplications({
    oblast_id: typeof oblastId === 'number' ? oblastId : (oblastId as any)?.id,
    culture_id: cultureId,
  }, open);
  
  // API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { applications: [...] }
  const suggestedApplications = applicationsData?.applications || [];

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±–ª–∞—Å—Ç–∏ –ø–ª–∞–Ω–∞ (—á–µ—Ä–µ–∑ –±—ç–∫ —Ñ–∏–ª—å—Ç—Ä)
  const { data: regionsByOblast = [] } = useQuery({
    queryKey: ['regionsByOblast', oblastId],
    queryFn: () => apiClient.get('/regions/', { params: { oblast: oblastId } }).then(res => {
      // –ú–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å—Å—è –º–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å results
      return Array.isArray(res.data) ? res.data : res.data.results || [];
    }),
    enabled: open && !!oblastId,
    staleTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
  });

  const { enqueueSnackbar } = useSnackbar();

  const { control, handleSubmit, formState: { errors }, reset, watch, setValue } = useForm<AddParticipantsFormData>({
    resolver: zodResolver(addParticipantsSchema),
    defaultValues: {
      regional_trials: [],
      participants: [],
    },
  });

  // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–≥–∏–æ–Ω –∏–∑ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ä—Ç–æ–≤
  const firstRegionId = watch('regional_trials.0.region_id');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ä—Ç–∞ –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ –¥–ª—è –∫—É–ª—å—Ç—É—Ä—ã –∏ —Ä–µ–≥–∏–æ–Ω–∞ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞)
  const { data: registryData } = useQuery({
    queryKey: ['sortRecordsByCulture', cultureId, firstRegionId],
    queryFn: () => apiClient.get('/sort-records/by-culture/', { 
      params: { culture_id: cultureId, region_id: firstRegionId } 
    }).then(res => res.data),
    enabled: open && !!cultureId && !!firstRegionId && typeof firstRegionId === 'number', // –¢–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–≥–∏–æ–Ω–∞
  });

  const registrySorts = registryData?.sorts || [];

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ maturity_group —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ onChange –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö Select –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤

  const { fields: trialFields, append: appendTrial, remove: removeTrial } = useFieldArray({
    control,
    name: 'regional_trials',
  });

  const { fields: participantFields, append: appendParticipant, remove: removeParticipant } = useFieldArray({
    control,
    name: 'participants',
  });

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –ø—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞
  const getPredecessorDisplayName = (predecessor: string | number) => {
    if (predecessor === 'fallow') return '–ü–∞—Ä';
    if (typeof predecessor === 'number') {
      const culture = dictionaries.cultures?.find((c: any) => c.id === predecessor);
      return culture?.name || `–ö—É–ª—å—Ç—É—Ä–∞ #${predecessor}`;
    }
    return predecessor;
  };

  const onSubmit = async (data: AddParticipantsFormData) => {
    try {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç API
    const transformedData = {
      participants: data.participants.map((p) => {
        const baseData = {
          maturity_group: p.maturity_group || '–ê–≤—Ç–æ', // –ò–∑ —Ñ–æ—Ä–º—ã –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          statistical_group: p.statistical_group,
          seeds_provision: p.seeds_provision,
          trials: data.regional_trials.map(trial => ({
            region_id: typeof trial.region_id === 'string' ? Number(trial.region_id) : trial.region_id,
            predecessor: trial.predecessor,
            seeding_rate: trial.seeding_rate,
            season: trial.season,
            ...(trial.trial_type_id && { trial_type_id: trial.trial_type_id })
          })), // –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –≤—Å–µ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è
        };

        // –î–ª—è –∑–∞—è–≤–æ–∫
        if (p.source_type === 'application' && p.application_id && typeof p.application_id === 'number') {
          const application = suggestedApplications.find((app: any) => app.id === p.application_id);
          return {
            ...baseData,
            application: Number(p.application_id),
            // –ï—Å–ª–∏ –≤ –∑–∞—è–≤–∫–µ –µ—Å—Ç—å patents_sort_id, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Ç–æ–∂–µ
            ...(application?.sort_record?.patents_sort_id && {
              patents_sort_id: application.sort_record.patents_sort_id,
              sort_name: application.sort_record?.name || application.sort_record_data?.name
            })
          };
        }

        // –î–ª—è —Ä–µ–µ—Å—Ç—Ä–∞
        if (p.source_type === 'registry' && p.patents_sort_id && typeof p.patents_sort_id === 'number') {
          // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∞ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Å–æ—Ä—Ç–æ–≤ —Ä–µ–µ—Å—Ç—Ä–∞
          const sortFromRegistry = registrySorts.find((sort: any) => sort.id === p.patents_sort_id);
          return {
            ...baseData,
            patents_sort_id: p.patents_sort_id,
            sort_name: sortFromRegistry?.name
          };
        }

        return baseData;
      }),
    };

      await addParticipants.mutateAsync({
        id: trialPlanId,
        data: transformedData,
      });

      enqueueSnackbar(`–î–æ–±–∞–≤–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${data.participants.length}`, { variant: 'success' });
      reset();
      onClose();
    } catch (error: any) {
      console.error('Error adding participants:', error);
      console.error('Error response:', error?.response?.data);
      console.error('Error status:', error?.response?.status);
      
      const errorMessage = error?.response?.data?.detail || 
                          error?.response?.data?.message || 
                          error?.message || 
                          '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤';
      
      enqueueSnackbar(errorMessage, { variant: 'error' });
    }
  };

  const handleClose = () => {
    reset();
    onClose();
  };

  return (
    <Dialog open={open} onClose={handleClose} maxWidth="lg" fullWidth>
      <DialogTitle>
        –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∫—É–ª—å—Ç—É—Ä—ã: {cultureName || `ID ${cultureId}`}
      </DialogTitle>

      <form onSubmit={handleSubmit(onSubmit)}>
        <DialogContent>
          {/* –†–ï–ì–ò–û–ù–ê–õ–¨–ù–´–ï –ò–°–ü–´–¢–ê–ù–ò–Ø (–≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å) */}
          <Box mb={4}>
            <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
              <Typography variant="h6">üåæ –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è (–æ–±—â–∏–µ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)</Typography>
              <Button variant="outlined" size="small" startIcon={<AddIcon />} onClick={() => appendTrial({ region_id: '', predecessor: 'fallow', seeding_rate: 5.0, season: 'spring' })}>
                –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥–∏–æ–Ω
              </Button>
            </Box>

            <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
              –≠—Ç–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –∫–æ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –Ω–∏–∂–µ
            </Typography>

            {trialFields.length === 0 ? (
              <Alert severity="warning">–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ</Alert>
            ) : (
              <Stack spacing={2}>
                {trialFields.map((field, index) => (
                  <Card key={field.id} variant="outlined">
                    <CardContent>
                      <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                        <Typography variant="subtitle1">–†–µ–≥–∏–æ–Ω #{index + 1}</Typography>
                        <IconButton color="error" size="small" onClick={() => removeTrial(index)}>
                          <DeleteIcon />
                        </IconButton>
                      </Box>

                      <Grid container spacing={2}>
                        <Grid item xs={12} sm={4}>
                          <Controller
                            name={`regional_trials.${index}.region_id`}
                            control={control}
                            render={({ field }) => (
                              <FormControl fullWidth error={!!errors.regional_trials?.[index]?.region_id}>
                                <InputLabel>–†–µ–≥–∏–æ–Ω (–ì–°–£)</InputLabel>
                                <Select 
                                  {...field} 
                                  value={field.value || ''} 
                                  label="–†–µ–≥–∏–æ–Ω (–ì–°–£)"
                                  onChange={(e) => field.onChange(e.target.value || '')}
                                >
                                  <MenuItem value="">
                                    <em>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω</em>
                                  </MenuItem>
                                  {regionsByOblast.map((region: any) => (
                                    <MenuItem key={region.id} value={region.id}>
                                      {region.name}
                                    </MenuItem>
                                  ))}
                                </Select>
                              </FormControl>
                            )}
                          />
                        </Grid>

                        <Grid item xs={12} sm={3}>
                          <Controller
                            name={`regional_trials.${index}.predecessor`}
                            control={control}
                            render={({ field }) => (
                              <FormControl fullWidth>
                                <InputLabel>–ü—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫</InputLabel>
                                <Select {...field} label="–ü—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫">
                                  <MenuItem value="fallow">–ü–∞—Ä</MenuItem>
                                  {dictionaries.cultures?.slice(0, 20).map((culture: any) => (
                                    <MenuItem key={`pred-${index}-${culture.id}`} value={culture.id}>
                                      {culture.name}
                                    </MenuItem>
                                  ))}
                                </Select>
                              </FormControl>
                            )}
                          />
                        </Grid>

                        <Grid item xs={6} sm={2}>
                          <Controller
                            name={`regional_trials.${index}.seeding_rate`}
                            control={control}
                            render={({ field }) => (
                              <TextField
                                {...field}
                                label="–ù–æ—Ä–º–∞"
                                type="number"
                                fullWidth
                                onChange={(e) => field.onChange(Number(e.target.value))}
                                inputProps={{ step: 0.1 }}
                              />
                            )}
                          />
                        </Grid>

                        <Grid item xs={6} sm={3}>
                          <Controller
                            name={`regional_trials.${index}.season`}
                            control={control}
                            render={({ field }) => (
                              <FormControl fullWidth>
                                <InputLabel>–°–µ–∑–æ–Ω</InputLabel>
                                <Select {...field} label="–°–µ–∑–æ–Ω">
                                  <MenuItem value="spring">–í–µ—Å–Ω–∞</MenuItem>
                                  <MenuItem value="autumn">–û—Å–µ–Ω—å</MenuItem>
                                  <MenuItem value="summer">–õ–µ—Ç–æ</MenuItem>
                                  <MenuItem value="winter">–ó–∏–º–∞</MenuItem>
                                </Select>
                              </FormControl>
                            )}
                          />
                        </Grid>
                      </Grid>

                      {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É */}
                      {watch(`regional_trials.${index}.predecessor`) && (
                        <Box mt={1}>
                          <Chip
                            label={`–ü—Ä–µ–¥—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫: ${getPredecessorDisplayName(watch(`regional_trials.${index}.predecessor`))}`}
                            size="small"
                            variant="outlined"
                          />
                        </Box>
                      )}
                    </CardContent>
                  </Card>
                ))}
              </Stack>
            )}

            {errors.regional_trials && (
              <Alert severity="error" sx={{ mt: 2 }}>
                {errors.regional_trials.message}
              </Alert>
            )}
          </Box>

          <Divider sx={{ my: 3 }} />

          {/* –£–ß–ê–°–¢–ù–ò–ö–ò */}
          <Box>
            <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
              <Typography variant="h6">üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫—É–ª—å—Ç—É—Ä—ã</Typography>
              <Button variant="outlined" size="small" startIcon={<AddIcon />} onClick={() => appendParticipant({ source_type: 'registry', application_id: '', patents_sort_id: '', statistical_group: 1, seeds_provision: 'provided' })}>
                –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
              </Button>
            </Box>

            <Typography variant="body2" color="text.secondary" sx={{ mb: 2 }}>
              –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–≤—è–∑—ã–≤–∞—é—Ç—Å—è —Å–æ –≤—Å–µ–º–∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏—è–º–∏ –≤—ã—à–µ. –ù–æ–º–µ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ, –≥—Ä—É–ø–ø–∞ —Å–ø–µ–ª–æ—Å—Ç–∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
            </Typography>

            {participantFields.length === 0 ? (
              <Alert severity="warning">–î–æ–±–∞–≤—å—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è</Alert>
            ) : (
              <Stack spacing={2}>
                {participantFields.map((field, index) => (
                  <Card key={field.id} variant="outlined">
                    <CardContent>
                      <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
                        <Stack direction="row" spacing={1} alignItems="center">
                          <Typography variant="subtitle1">–£—á–∞—Å—Ç–Ω–∏–∫ #{index + 1}</Typography>
                          <Chip label={`${trialFields.length} —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏—Å–ø—ã—Ç–∞–Ω–∏–π`} size="small" variant="outlined" color="success" />
                        </Stack>
                        <IconButton color="error" size="small" onClick={() => removeParticipant(index)}>
                          <DeleteIcon />
                        </IconButton>
                      </Box>

                      <Grid container spacing={2}>
                        <Grid item xs={12} sm={4}>
                          <Controller
                            name={`participants.${index}.source_type`}
                            control={control}
                            render={({ field }) => (
                              <FormControl fullWidth>
                                <InputLabel>–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–æ—Ä—Ç–∞</InputLabel>
                                <Select {...field} label="–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–æ—Ä—Ç–∞">
                                  <MenuItem value="application">üìã –ò–∑ –∑–∞—è–≤–∫–∏</MenuItem>
                                  <MenuItem value="registry">üìö –ò–∑ —Ä–µ–µ—Å—Ç—Ä–∞</MenuItem>
                                </Select>
                              </FormControl>
                            )}
                          />
                        </Grid>

                        {watch(`participants.${index}.source_type`) === 'application' ? (
                          <Grid item xs={12} sm={4}>
                            <Controller
                              name={`participants.${index}.application_id`}
                              control={control}
                              render={({ field }) => (
                                <FormControl fullWidth>
                                  <InputLabel>–ó–∞—è–≤–∫–∞</InputLabel>
                                  <Select 
                                    {...field} 
                                    value={field.value || ''} 
                                    label="–ó–∞—è–≤–∫–∞"
                                    onChange={(e) => {
                                      const selectedAppId = e.target.value;
                                      field.onChange(selectedAppId || '');
                                      
                                      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º maturity_group –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞—è–≤–∫–∏
                                      if (selectedAppId && typeof selectedAppId === 'number') {
                                        const application = suggestedApplications.find((app: any) => app.id === selectedAppId);
                                        if (application?.maturity_group) {
                                          setValue(`participants.${index}.maturity_group`, application.maturity_group);
                                        }
                                      }
                                    }}
                                  >
                                    <MenuItem value="">
                                      <em>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞—è–≤–∫—É</em>
                                    </MenuItem>
                                    {suggestedApplications.length === 0 ? (
                                      <MenuItem value="" disabled>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞—è–≤–æ–∫</MenuItem>
                                    ) : (
                                      suggestedApplications.map((app: any) => (
                                        <MenuItem key={app.id} value={app.id}>
                                          {app.application_number} - {app.sort_record?.name}
                                        </MenuItem>
                                      ))
                                    )}
                                  </Select>
                                </FormControl>
                              )}
                            />
                          </Grid>
                        ) : (
                          <Grid item xs={12} sm={4}>
                            <Controller
                              name={`participants.${index}.patents_sort_id`}
                              control={control}
                              render={({ field }) => (
                                <FormControl fullWidth disabled={trialFields.length === 0}>
                                  <InputLabel>–°–æ—Ä—Ç –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞</InputLabel>
                                  <Select 
                                    {...field} 
                                    value={field.value || ''} 
                                    label="–°–æ—Ä—Ç –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞"
                                    onChange={(e) => {
                                      const selectedSortId = e.target.value;
                                      field.onChange(selectedSortId || '');
                                      
                                      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º maturity_group –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–æ—Ä—Ç–∞
                                      if (selectedSortId && typeof selectedSortId === 'number') {
                                        const sort = registrySorts.find((s: any) => s.id === selectedSortId);
                                        if (sort?.maturity_group) {
                                          setValue(`participants.${index}.maturity_group`, sort.maturity_group);
                                        }
                                      }
                                    }}
                                  >
                                    <MenuItem value="">
                                      <em>–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ä—Ç</em>
                                    </MenuItem>
                                    {trialFields.length === 0 ? (
                                      <MenuItem value="" disabled>–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ä–µ–≥–∏–æ–Ω</MenuItem>
                                    ) : registrySorts.length === 0 ? (
                                      <MenuItem value="" disabled>–ù–µ—Ç —Å–æ—Ä—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞</MenuItem>
                                    ) : (
                                      registrySorts.map((sort: any) => (
                                        <MenuItem key={sort.id} value={sort.id}>
                                          {sort.name}
                                        </MenuItem>
                                      ))
                                    )}
                                  </Select>
                                </FormControl>
                              )}
                            />
                          </Grid>
                        )}

                        <Grid item xs={6} sm={2}>
                          <Controller
                            name={`participants.${index}.statistical_group`}
                            control={control}
                            render={({ field }) => (
                              <FormControl fullWidth>
                                <InputLabel>–ì—Ä—É–ø–ø–∞</InputLabel>
                                <Select {...field} label="–ì—Ä—É–ø–ø–∞">
                                  <MenuItem value={0}>–°—Ç–∞–Ω–¥–∞—Ä—Ç</MenuItem>
                                  <MenuItem value={1}>–ò—Å–ø—ã—Ç—ã–≤–∞–µ–º—ã–π</MenuItem>
                                </Select>
                              </FormControl>
                            )}
                          />
                        </Grid>


                        <Grid item xs={6} sm={2}>
                          <Controller
                            name={`participants.${index}.seeds_provision`}
                            control={control}
                            render={({ field }) => (
                              <FormControl fullWidth>
                                <InputLabel>–°–µ–º–µ–Ω–∞</InputLabel>
                                <Select {...field} label="–°–µ–º–µ–Ω–∞">
                                  <MenuItem value="provided">‚úÖ –ü–æ–ª—É—á–µ–Ω—ã</MenuItem>
                                  <MenuItem value="imported">üì¶ –ò–º–ø–æ—Ä—Ç</MenuItem>
                                  <MenuItem value="purchased">üõí –ö—É–ø–ª–µ–Ω—ã</MenuItem>
                                </Select>
                              </FormControl>
                            )}
                          />
                        </Grid>
                      </Grid>

                      {/* –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º—ã–µ –ø–æ–ª—è */}
                      <Box mt={2} p={1} bgcolor="grey.50" borderRadius={1}>
                        <Stack direction="row" spacing={1} flexWrap="wrap">
                          <Chip label="–ù–æ–º–µ—Ä: –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω —Å–µ—Ä–≤–µ—Ä–æ–º" size="small" color="primary" variant="outlined" />
                          <Chip label="–ì—Ä—É–ø–ø–∞ —Å–ø–µ–ª–æ—Å—Ç–∏: –∏–∑ —Å–æ—Ä—Ç–∞ (–∞–≤—Ç–æ)" size="small" color="secondary" variant="outlined" />
                          <Chip label={watch(`participants.${index}.statistical_group`) === 0 ? '–°—Ç–∞–Ω–¥–∞—Ä—Ç' : '–ò—Å–ø—ã—Ç—ã–≤–∞–µ–º—ã–π'} size="small" color={watch(`participants.${index}.statistical_group`) === 0 ? 'success' : 'primary'} />
                        </Stack>
                      </Box>
                    </CardContent>
                  </Card>
                ))}
              </Stack>
            )}

            {errors.participants && (
              <Alert severity="error" sx={{ mt: 2 }}>
                {errors.participants.message}
              </Alert>
            )}
          </Box>
        </DialogContent>

        <DialogActions>
          <Button onClick={handleClose}>–û—Ç–º–µ–Ω–∞</Button>
          <Button
            type="submit"
            variant="contained"
            startIcon={<SaveIcon />}
            disabled={addParticipants.isPending || trialFields.length === 0 || participantFields.length === 0}
          >
            {addParticipants.isPending ? (
              <>
                <CircularProgress size={16} sx={{ mr: 1 }} />
                –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...
              </>
            ) : (
              '–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'
            )}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};
