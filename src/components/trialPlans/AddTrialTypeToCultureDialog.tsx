import React, { useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Grid,
  Typography,
  Alert,
  CircularProgress,
  Box,
  Chip,
  Stack,
} from '@mui/material';
import {
  Save as SaveIcon,
} from '@mui/icons-material';
import { useForm, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import apiClient from '../../api/client';
import { useSnackbar } from 'notistack';

// Validation schema
const addTrialTypeSchema = z.object({
  trial_type_id: z.number().min(1, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏—Å–ø—ã—Ç–∞–Ω–∏—è'),
  season: z.enum(['spring', 'autumn', 'summer', 'winter'], {
    required_error: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω –ø–æ—Å–∞–¥–∫–∏',
  }),
});

type AddTrialTypeFormData = z.infer<typeof addTrialTypeSchema>;

interface AddTrialTypeToCultureDialogProps {
  open: boolean;
  onClose: () => void;
  trialPlanId: number;
  cultureId: number;
  cultureName: string;
  existingTrialTypeIds: number[];
}

export const AddTrialTypeToCultureDialog: React.FC<AddTrialTypeToCultureDialogProps> = ({
  open,
  onClose,
  trialPlanId,
  cultureId,
  cultureName,
  existingTrialTypeIds,
}) => {
  const { enqueueSnackbar } = useSnackbar();
  const queryClient = useQueryClient();

  // Form
  const { control, handleSubmit, formState: { errors }, reset } = useForm<AddTrialTypeFormData>({
    resolver: zodResolver(addTrialTypeSchema),
    defaultValues: {
      trial_type_id: 0,
      season: 'spring',
    },
  });

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∏–ø—ã –∏—Å–ø—ã—Ç–∞–Ω–∏–π
  const { data: trialTypes = [], isLoading: isLoadingTrialTypes } = useQuery({
    queryKey: ['trialTypes'],
    queryFn: () => apiClient.get('/trial-types/').then(res => res.data),
    enabled: open,
    staleTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
  });

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–∏–ø—ã –∏—Å–ø—ã—Ç–∞–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã
  const availableTrialTypes = trialTypes.filter((type: any) => 
    !existingTrialTypeIds.includes(type.id)
  );

  // –ú—É—Ç–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏—è
  const addTrialTypeMutation = useMutation({
    mutationFn: async (data: AddTrialTypeFormData) => {
      const response = await apiClient.post(
        `/trial-plans/${trialPlanId}/cultures/${cultureId}/add-trial-type/`,
        {
          trial_type_id: data.trial_type_id,
          season: data.season,
        }
      );
      return response.data;
    },
    onSuccess: () => {
      enqueueSnackbar('–¢–∏–ø –∏—Å–ø—ã—Ç–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', { variant: 'success' });
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø–ª–∞–Ω–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏–π
      queryClient.invalidateQueries({ queryKey: ['trialPlan', trialPlanId] });
      reset();
      onClose();
    },
    onError: (error: any) => {
      console.error('Error adding trial type:', error);
      enqueueSnackbar(
        error?.response?.data?.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏—è',
        { variant: 'error' }
      );
    },
  });

  const onSubmit = async (data: AddTrialTypeFormData) => {
    await addTrialTypeMutation.mutateAsync(data);
  };

  const handleClose = () => {
    reset();
    onClose();
  };

  const getSeasonLabel = (season: string) => {
    const labels = {
      spring: '–í–µ—Å–Ω–∞',
      autumn: '–û—Å–µ–Ω—å',
      summer: '–õ–µ—Ç–æ',
      winter: '–ó–∏–º–∞',
    };
    return labels[season as keyof typeof labels] || season;
  };

  return (
    <Dialog
      open={open}
      onClose={handleClose}
      maxWidth="sm"
      fullWidth
    >
      <DialogTitle>
        –î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø –∏—Å–ø—ã—Ç–∞–Ω–∏—è –¥–ª—è –∫—É–ª—å—Ç—É—Ä—ã: {cultureName}
      </DialogTitle>

      <form onSubmit={handleSubmit(onSubmit)}>
        <DialogContent>
          <Box mb={3}>
            <Typography variant="body2" color="text.secondary">
              –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏—Å–ø—ã—Ç–∞–Ω–∏—è –∏ —Å–µ–∑–æ–Ω –ø–æ—Å–∞–¥–∫–∏ –¥–ª—è –∫—É–ª—å—Ç—É—Ä—ã "{cultureName}"
            </Typography>
          </Box>

          <Grid container spacing={3}>
            {/* –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏—è */}
            <Grid item xs={12}>
              <Controller
                name="trial_type_id"
                control={control}
                render={({ field }) => (
                  <FormControl fullWidth error={!!errors.trial_type_id}>
                    <InputLabel>–¢–∏–ø –∏—Å–ø—ã—Ç–∞–Ω–∏—è</InputLabel>
                    <Select {...field} label="–¢–∏–ø –∏—Å–ø—ã—Ç–∞–Ω–∏—è">
                      <MenuItem value={0}>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏—Å–ø—ã—Ç–∞–Ω–∏—è...</MenuItem>
                      {availableTrialTypes.map((type: any) => (
                        <MenuItem key={type.id} value={type.id}>
                          <Box>
                            <Typography variant="body1" fontWeight={500}>
                              {type.name}
                            </Typography>
                            <Typography variant="caption" color="text.secondary">
                              {type.description || type.name_full}
                            </Typography>
                          </Box>
                        </MenuItem>
                      ))}
                    </Select>
                    {errors.trial_type_id && (
                      <Alert severity="error" sx={{ mt: 1 }}>
                        {errors.trial_type_id.message}
                      </Alert>
                    )}
                  </FormControl>
                )}
              />
            </Grid>

            {/* –í—ã–±–æ—Ä —Å–µ–∑–æ–Ω–∞ */}
            <Grid item xs={12}>
              <Controller
                name="season"
                control={control}
                render={({ field }) => (
                  <FormControl fullWidth error={!!errors.season}>
                    <InputLabel>–°–µ–∑–æ–Ω –ø–æ—Å–∞–¥–∫–∏</InputLabel>
                    <Select {...field} label="–°–µ–∑–æ–Ω –ø–æ—Å–∞–¥–∫–∏">
                      <MenuItem value="spring">üå± –í–µ—Å–Ω–∞</MenuItem>
                      <MenuItem value="autumn">üçÇ –û—Å–µ–Ω—å</MenuItem>
                      <MenuItem value="summer">‚òÄÔ∏è –õ–µ—Ç–æ</MenuItem>
                      <MenuItem value="winter">‚ùÑÔ∏è –ó–∏–º–∞</MenuItem>
                    </Select>
                    {errors.season && (
                      <Alert severity="error" sx={{ mt: 1 }}>
                        {errors.season.message}
                      </Alert>
                    )}
                  </FormControl>
                )}
              />
            </Grid>
          </Grid>

          {availableTrialTypes.length === 0 && (
            <Alert severity="info" sx={{ mt: 2 }}>
              –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –∏—Å–ø—ã—Ç–∞–Ω–∏–π —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –∫—É–ª—å—Ç—É—Ä—ã
            </Alert>
          )}

          {isLoadingTrialTypes && (
            <Box display="flex" justifyContent="center" py={2}>
              <CircularProgress size={24} />
            </Box>
          )}
        </DialogContent>

        <DialogActions>
          <Button onClick={handleClose}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button
            type="submit"
            variant="contained"
            startIcon={<SaveIcon />}
            disabled={addTrialTypeMutation.isPending || availableTrialTypes.length === 0}
          >
            {addTrialTypeMutation.isPending ? (
              <>
                <CircularProgress size={16} sx={{ mr: 1 }} />
                –î–æ–±–∞–≤–ª–µ–Ω–∏–µ...
              </>
            ) : (
              '–î–æ–±–∞–≤–∏—Ç—å —Ç–∏–ø –∏—Å–ø—ã—Ç–∞–Ω–∏—è'
            )}
          </Button>
        </DialogActions>
      </form>
    </Dialog>
  );
};