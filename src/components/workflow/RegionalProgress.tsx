import React from 'react';
import {
  Grid,
  Card,
  CardContent,
  CardActions,
  Typography,
  Chip,
  Button,
  Alert,
  Box,
  Divider,
  Stack,
  Paper,
  LinearProgress,
} from '@mui/material';
import {
  CheckCircle as CheckIcon,
  Schedule as PendingIcon,
  Cancel as CancelIcon,
  PlayArrow as ContinueIcon,
  ErrorOutline as ErrorIcon,
  Timeline as TimelineIcon,
} from '@mui/icons-material';
import { useNavigate } from 'react-router-dom';
import type { RegionalStatusItem, PlannedDistributionStatus } from '@/types/api.types';
import {
  getTrialStatusMuiColor,
  getDecisionMuiColor,
  getDecisionLabel,
} from '@/utils/statusHelpers';

interface RegionalProgressProps {
  regionalStatus: RegionalStatusItem[];
  applicationId?: number;
  isLoading?: boolean;
}

// –°—Ç–∞—Ç—É—Å PlannedDistribution ‚Üí UI
const getDistributionStatusConfig = (status: PlannedDistributionStatus) => {
  switch (status) {
    case 'planned':
      return { icon: <PendingIcon />, label: '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ', color: 'default' as const };
    case 'in_progress':
      return { icon: <TimelineIcon />, label: '–ò—Å–ø—ã—Ç–∞–Ω–∏—è –∏–¥—É—Ç', color: 'info' as const };
    case 'approved':
      return { icon: <CheckIcon />, label: '–û–¥–æ–±—Ä–µ–Ω–æ', color: 'success' as const };
    case 'rejected':
      return { icon: <ErrorIcon />, label: '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ', color: 'error' as const };
    case 'cancelled':
      return { icon: <CancelIcon />, label: '–û—Ç–º–µ–Ω–µ–Ω–æ', color: 'default' as const };
    default:
      return { icon: <PendingIcon />, label: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω', color: 'default' as const };
  }
};

export const RegionalProgress: React.FC<RegionalProgressProps> = ({
  regionalStatus,
  applicationId,
  isLoading = false,
}) => {
  const navigate = useNavigate();

  if (isLoading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', py: 4 }}>
        <LinearProgress sx={{ width: '100%' }} />
      </Box>
    );
  }

  if (!regionalStatus || regionalStatus.length === 0) {
    return (
      <Alert severity="info">
        –ó–∞—è–≤–∫–∞ –µ—â–µ –Ω–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞—è–≤–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å–ø—ã—Ç–∞–Ω–∏–π.
      </Alert>
    );
  }

  // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const stats = {
    total: regionalStatus.length,
    planned: regionalStatus.filter(r => r.status === 'planned').length,
    inProgress: regionalStatus.filter(r => r.status === 'in_progress').length,
    approved: regionalStatus.filter(r => r.status === 'approved').length,
    rejected: regionalStatus.filter(r => r.status === 'rejected').length,
    totalTrials: regionalStatus.reduce((sum, r) => sum + r.trials.length, 0),
  };

  return (
    <Box>
      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <Alert severity="info" sx={{ mb: 3 }}>
        <Typography variant="body2">
          –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –ø–æ <strong>{stats.total}</strong> —Ä–µ–≥–∏–æ–Ω(–∞–º). 
          –°–æ–∑–¥–∞–Ω–æ –∏—Å–ø—ã—Ç–∞–Ω–∏–π: <strong>{stats.totalTrials}</strong>
        </Typography>
        <Box sx={{ mt: 1, display: 'flex', gap: 1, flexWrap: 'wrap' }}>
          {stats.planned > 0 && (
            <Chip label={`–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: ${stats.planned}`} size="small" />
          )}
          {stats.inProgress > 0 && (
            <Chip label={`–í –ø—Ä–æ—Ü–µ—Å—Å–µ: ${stats.inProgress}`} size="small" color="info" />
          )}
          {stats.approved > 0 && (
            <Chip label={`–û–¥–æ–±—Ä–µ–Ω–æ: ${stats.approved}`} size="small" color="success" />
          )}
          {stats.rejected > 0 && (
            <Chip label={`–û—Ç–∫–ª–æ–Ω–µ–Ω–æ: ${stats.rejected}`} size="small" color="error" />
          )}
        </Box>
      </Alert>

      {/* –ö–∞—Ä—Ç–æ—á–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤ */}
      <Grid container spacing={2}>
        {regionalStatus.map((region) => {
          const statusConfig = getDistributionStatusConfig(region.status);
          const hasTrials = region.trials.length > 0;
          const latestTrial = region.trials.length > 0 
            ? region.trials[region.trials.length - 1] 
            : null;

          return (
            <Grid item xs={12} md={6} lg={4} key={region.region_id}>
              <Card
                sx={{
                  height: '100%',
                  display: 'flex',
                  flexDirection: 'column',
                  border: '2px solid',
                  borderColor:
                    region.status === 'approved'
                      ? 'success.main'
                      : region.status === 'rejected'
                      ? 'error.main'
                      : region.status === 'in_progress'
                      ? 'info.main'
                      : 'divider',
                }}
              >
                <CardContent sx={{ flexGrow: 1 }}>
                  {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ - –†–µ–≥–∏–æ–Ω */}
                  <Box display="flex" alignItems="center" justifyContent="space-between" mb={1}>
                    <Typography variant="h6" color="primary">
                      {region.oblast_name}
                    </Typography>
                    {statusConfig.icon}
                  </Box>

                  <Typography variant="body2" color="text.secondary" gutterBottom>
                    <strong>–ì–°–£:</strong> {region.region_name}
                  </Typography>

                  <Divider sx={{ my: 2 }} />

                  {/* –°—Ç–∞—Ç—É—Å PlannedDistribution */}
                  <Box sx={{ mb: 2 }}>
                    <Chip
                      icon={statusConfig.icon}
                      label={statusConfig.label}
                      color={statusConfig.color}
                      size="small"
                      sx={{ mb: 1 }}
                    />
                  </Box>

                  {/* –ü–µ—Ä–∏–æ–¥ –∏—Å–ø—ã—Ç–∞–Ω–∏–π */}
                  {(region.year_started || region.year_completed) && (
                    <Box sx={{ mb: 2, p: 1.5, bgcolor: 'action.hover', borderRadius: 1 }}>
                      <Typography variant="caption" color="text.secondary" display="block" gutterBottom>
                        –ü–ï–†–ò–û–î –ò–°–ü–´–¢–ê–ù–ò–ô
                      </Typography>
                      <Typography variant="body2">
                        {region.year_started && region.year_completed && region.year_started !== region.year_completed ? (
                          <>
                            <strong>{region.year_started}-{region.year_completed}</strong>
                            {region.years_count && ` (${region.years_count} ${region.years_count === 1 ? '–≥–æ–¥' : region.years_count < 5 ? '–≥–æ–¥–∞' : '–ª–µ—Ç'})`}
                          </>
                        ) : region.year_started && region.year_completed && region.year_started === region.year_completed ? (
                          <>
                            <strong>{region.year_started}</strong> (1 –≥–æ–¥)
                          </>
                        ) : region.year_started ? (
                          <>–ù–∞—á–∞—Ç–æ: <strong>{region.year_started}</strong></>
                        ) : null}
                      </Typography>
                    </Box>
                  )}

                  {/* –ò—Å—Ç–æ—Ä–∏—è –∏—Å–ø—ã—Ç–∞–Ω–∏–π –ø–æ –≥–æ–¥–∞–º */}
                  {hasTrials && (
                    <Box sx={{ mt: 2 }}>
                      <Typography variant="caption" color="text.secondary" display="block" gutterBottom>
                        –ò–°–¢–û–†–ò–Ø –ò–°–ü–´–¢–ê–ù–ò–ô
                      </Typography>
                      <Stack spacing={1} sx={{ mt: 1 }}>
                        {region.trials.map((trial, index) => {
                          const isLast = index === region.trials.length - 1;
                          return (
                            <Paper
                              key={trial.trial_id}
                              variant="outlined"
                              sx={{
                                p: 1.5,
                                bgcolor: isLast ? 'action.selected' : 'background.paper',
                                borderLeft: '4px solid',
                                borderLeftColor: trial.decision
                                  ? trial.decision === 'approved'
                                    ? 'success.main'
                                    : trial.decision === 'rejected'
                                    ? 'error.main'
                                    : 'info.main'
                                  : 'grey.300',
                              }}
                            >
                              <Box display="flex" justifyContent="space-between" alignItems="center" mb={0.5}>
                                <Typography variant="body2" fontWeight="medium">
                                  üìÖ {trial.year || new Date(trial.start_date).getFullYear()} –≥–æ–¥
                                </Typography>
                                <Typography variant="caption" color="text.secondary">
                                  Trial #{trial.trial_id}
                                </Typography>
                              </Box>

                              <Box display="flex" gap={0.5} flexWrap="wrap" mt={1}>
                                <Chip
                                  label={trial.status}
                                  color={getTrialStatusMuiColor(trial.status)}
                                  size="small"
                                  sx={{ fontSize: '0.7rem', height: 20 }}
                                />
                                {trial.decision && (
                                  <Chip
                                    icon={
                                      trial.decision === 'approved' ? <CheckIcon /> :
                                      trial.decision === 'rejected' ? <ErrorIcon /> :
                                      <ContinueIcon />
                                    }
                                    label={getDecisionLabel(trial.decision)}
                                    color={getDecisionMuiColor(trial.decision)}
                                    size="small"
                                    sx={{ fontSize: '0.7rem', height: 20 }}
                                  />
                                )}
                                {trial.laboratory_status === 'completed' && (
                                  <Chip
                                    label="üî¨ –õ–∞–±. –∞–Ω–∞–ª–∏–∑"
                                    color="success"
                                    size="small"
                                    sx={{ fontSize: '0.7rem', height: 20 }}
                                  />
                                )}
                              </Box>

                              {isLast && (
                                <Typography variant="caption" color="primary" display="block" sx={{ mt: 0.5 }}>
                                  –¢–µ–∫—É—â–µ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ
                                </Typography>
                              )}
                            </Paper>
                          );
                        })}
                      </Stack>
                    </Box>
                  )}

                  {/* –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–µ—Ç –∏—Å–ø—ã—Ç–∞–Ω–∏–π) */}
                  {!hasTrials && (
                    <Box sx={{ mt: 2, p: 1.5, bgcolor: 'action.hover', borderRadius: 1 }}>
                      <Typography variant="caption" color="text.secondary" display="block" gutterBottom>
                        –ü–ê–†–ê–ú–ï–¢–†–´ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø
                      </Typography>
                      {region.trial_type && (
                        <Typography variant="body2" gutterBottom>
                          <strong>–¢–∏–ø:</strong> {region.trial_type}
                        </Typography>
                      )}
                      {region.planting_season && (
                        <Typography variant="body2">
                          <strong>–°–µ–∑–æ–Ω:</strong>{' '}
                          {region.planting_season === 'spring' ? '–í–µ—Å–µ–Ω–Ω–∏–π' : '–û—Å–µ–Ω–Ω–∏–π'}
                        </Typography>
                      )}
                    </Box>
                  )}
                </CardContent>

                <CardActions>
                  {latestTrial ? (
                    <Button
                      size="small"
                      onClick={() => navigate(`/trials/${latestTrial.trial_id}`)}
                    >
                      –û—Ç–∫—Ä—ã—Ç—å Trial #{latestTrial.trial_id}
                    </Button>
                  ) : (
                    <Typography variant="body2" color="text.secondary" sx={{ px: 1, py: 0.5 }}>
                      –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞–Ω–∏–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è
                    </Typography>
                  )}

                  {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ Trial –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≥–æ–¥–∞ */}
                  {region.status === 'in_progress' && latestTrial?.decision === 'continue' && (
                    <Button
                      size="small"
                      color="primary"
                      variant="outlined"
                      onClick={() => navigate(`/trials/new?region=${region.region_id}&application=${applicationId}`)}
                    >
                      + –°–æ–∑–¥–∞—Ç—å {(latestTrial.year || new Date().getFullYear()) + 1}
                    </Button>
                  )}
                </CardActions>
              </Card>
            </Grid>
          );
        })}
      </Grid>
    </Box>
  );
};
