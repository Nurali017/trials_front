import React from 'react';
import {
  Card,
  CardContent,
  Stack,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Button,
  Chip,
  Box,
  Typography,
} from '@mui/material';
import { Clear as ClearIcon, FilterList as FilterIcon } from '@mui/icons-material';
import type { ApplicationFilters } from '@/types/api.types';
import { useDictionaries } from '@/hooks/useDictionaries';

interface ApplicationFiltersProps {
  filters: ApplicationFilters;
  onFiltersChange: (filters: ApplicationFilters) => void;
  onReset: () => void;
}

const ApplicationFiltersComponent: React.FC<ApplicationFiltersProps> = ({
  filters,
  onFiltersChange,
  onReset,
}) => {
  const dictionaries = useDictionaries();

  // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  React.useEffect(() => {
    console.log('üîç ApplicationFilters - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–ª–æ–≤–∞—Ä–µ–π:', {
      cultureGroups: dictionaries?.cultureGroups,
      cultures: dictionaries?.cultures,
      loading: dictionaries?.loading,
      errors: dictionaries?.errors,
    });
    
    if (dictionaries?.cultureGroups) {
      console.log('üìã –ì—Ä—É–ø–ø—ã –∫—É–ª—å—Ç—É—Ä –¥–ª—è —Å–µ–ª–µ–∫—Ç–∞:', dictionaries.cultureGroups.map(g => ({ id: g.id, name: g.name, code: g.code })));
      console.log('üìã –ü–µ—Ä–≤–∞—è –≥—Ä—É–ø–ø–∞ –∫—É–ª—å—Ç—É—Ä:', dictionaries.cultureGroups[0]);
      console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø—ã:', {
        id: dictionaries.cultureGroups[0]?.id,
        name: dictionaries.cultureGroups[0]?.name,
        code: dictionaries.cultureGroups[0]?.code,
        keys: Object.keys(dictionaries.cultureGroups[0] || {})
      });
    }
    
    console.log('üîç –¢–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä patents_group_id:', filters.patents_group_id);
    console.log('üîç –¢–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä patents_culture_id:', filters.patents_culture_id);
  }, [dictionaries]);

  const handleFilterChange = (key: keyof ApplicationFilters, value: any) => {
    console.log('üîß –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞:', { key, value, oldValue: filters[key] });
    onFiltersChange({
      ...filters,
      [key]: value === '' ? undefined : value,
    });
  };

  const getActiveFiltersCount = () => {
    // –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
    const activeFilters = [
      filters.search,
      filters.year,
      filters.patents_group_id,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º patents_group_id –≤–º–µ—Å—Ç–æ culture_group
      filters.patents_culture_id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º patents_culture_id –≤–º–µ—Å—Ç–æ culture
    ].filter(value => 
      value !== undefined && value !== '' && value !== null
    );
    return activeFilters.length;
  };

  const activeFiltersCount = getActiveFiltersCount();

  return (
    <Card sx={{ mb: 3 }}>
      <CardContent>
        <Box display="flex" alignItems="center" justifyContent="space-between" mb={2}>
          <Typography variant="h6" fontWeight="bold">
            –§–∏–ª—å—Ç—Ä—ã –∑–∞—è–≤–æ–∫
          </Typography>
          <Box display="flex" alignItems="center" gap={1}>
            {activeFiltersCount > 0 && (
              <Chip
                label={`${activeFiltersCount} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤`}
                color="primary"
                size="small"
                icon={<FilterIcon />}
              />
            )}
            <Button
              variant="outlined"
              size="small"
              startIcon={<ClearIcon />}
              onClick={onReset}
              disabled={activeFiltersCount === 0}
            >
              –°–±—Ä–æ—Å–∏—Ç—å
            </Button>
          </Box>
        </Box>

        <Stack direction="row" spacing={2} alignItems="center" flexWrap="wrap">
          {/* –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞—è–≤–∫–∏ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é —Å–æ—Ä—Ç–∞ */}
          <TextField
            label="–ü–æ–∏—Å–∫"
            placeholder="–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ä—Ç–∞"
            value={filters.search || ''}
            onChange={(e) => {
              console.log('üéØ Search onChange –≤—ã–∑–≤–∞–Ω:', e.target.value);
              handleFilterChange('search', e.target.value);
            }}
            size="small"
            sx={{ minWidth: 300 }}
          />

          {/* –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É */}
          <TextField
            label="–ì–æ–¥"
            type="number"
            placeholder="2025"
            value={filters.year || ''}
            onChange={(e) => {
              console.log('üéØ Year onChange –≤—ã–∑–≤–∞–Ω:', e.target.value);
              handleFilterChange('year', e.target.value ? parseInt(e.target.value) : undefined);
            }}
            size="small"
            sx={{ minWidth: 120 }}
            inputProps={{ min: 2020, max: 2030 }}
          />

          {/* –§–∏–ª—å—Ç—Ä –ø–æ –≥—Ä—É–ø–ø–µ –∫—É–ª—å—Ç—É—Ä (—Ç–æ–ª—å–∫–æ –≤—ã–±–æ—Ä–∫–∞) */}
          <FormControl size="small" sx={{ minWidth: 200 }}>
            <InputLabel>–ì—Ä—É–ø–ø–∞ –∫—É–ª—å—Ç—É—Ä</InputLabel>
            <Select
              value={filters.patents_group_id || ''}
              label="–ì—Ä—É–ø–ø–∞ –∫—É–ª—å—Ç—É—Ä"
              onChange={(e) => {
                console.log('üéØ Select onChange –≤—ã–∑–≤–∞–Ω:', e.target.value);
                handleFilterChange('patents_group_id', e.target.value);
              }}
            >
              <MenuItem value="">–í—Å–µ –≥—Ä—É–ø–ø—ã –∫—É–ª—å—Ç—É—Ä</MenuItem>
              {dictionaries?.loading?.cultureGroups ? (
                <MenuItem disabled>–ó–∞–≥—Ä—É–∑–∫–∞...</MenuItem>
              ) : dictionaries?.cultureGroups?.length > 0 ? (
                dictionaries.cultureGroups.map((group) => {
                  console.log('üéØ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≥—Ä—É–ø–ø—ã –∫—É–ª—å—Ç—É—Ä:', { id: group.id, name: group.name, code: group.code });
                  return (
                    <MenuItem key={group.id} value={group.id}>
                      {group.name} ({group.code})
                    </MenuItem>
                  );
                })
              ) : (
                <MenuItem disabled>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö ({dictionaries?.cultureGroups?.length || 0})</MenuItem>
              )}
            </Select>
          </FormControl>

          {/* –§–∏–ª—å—Ç—Ä –ø–æ –∫—É–ª—å—Ç—É—Ä–µ (—Ç–æ–ª—å–∫–æ –≤—ã–±–æ—Ä–∫–∞) */}
          <FormControl size="small" sx={{ minWidth: 200 }}>
            <InputLabel>–ö—É–ª—å—Ç—É—Ä–∞</InputLabel>
            <Select
              value={filters.patents_culture_id || ''}
              label="–ö—É–ª—å—Ç—É—Ä–∞"
              onChange={(e) => {
                console.log('üéØ Select onChange –≤—ã–∑–≤–∞–Ω –¥–ª—è –∫—É–ª—å—Ç—É—Ä:', e.target.value);
                handleFilterChange('patents_culture_id', e.target.value);
              }}
            >
              <MenuItem value="">–í—Å–µ –∫—É–ª—å—Ç—É—Ä—ã</MenuItem>
              {dictionaries?.cultures?.map((culture) => (
                <MenuItem key={culture.id} value={culture.id}>
                  {culture.name}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
        </Stack>

        {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
        {activeFiltersCount > 0 && (
          <Box mt={2}>
            <Typography variant="body2" color="text.secondary" mb={1}>
              –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:
            </Typography>
            <Stack direction="row" spacing={1} flexWrap="wrap">
              {filters.search && (
                <Chip
                  label={`–ü–æ–∏—Å–∫: ${filters.search}`}
                  onDelete={() => handleFilterChange('search', undefined)}
                  size="small"
                />
              )}
              {filters.year && (
                <Chip
                  label={`–ì–æ–¥: ${filters.year}`}
                  onDelete={() => handleFilterChange('year', undefined)}
                  size="small"
                />
              )}
              {filters.patents_group_id && (
                <Chip
                  label={`–ì—Ä—É–ø–ø–∞ –∫—É–ª—å—Ç—É—Ä: ${dictionaries?.cultureGroups?.find(g => g.id === filters.patents_group_id)?.name || filters.patents_group_id}`}
                  onDelete={() => handleFilterChange('patents_group_id', undefined)}
                  size="small"
                />
              )}
              {filters.patents_culture_id && (
                <Chip
                  label={`–ö—É–ª—å—Ç—É—Ä–∞: ${dictionaries?.cultures?.find(c => c.id === filters.patents_culture_id)?.name || filters.patents_culture_id}`}
                  onDelete={() => handleFilterChange('patents_culture_id', undefined)}
                  size="small"
                />
              )}
            </Stack>
          </Box>
        )}
      </CardContent>
    </Card>
  );
};

export default ApplicationFiltersComponent;
