import apiClient from './client';
import type { Oblast, Region, ClimateZone, Indicator, Culture, CultureGroup, Originator, SortRecord, TrialType } from '@/types/api.types';

export const dictionariesService = {
  // Oblasts
  oblasts: {
    getAll: async () => {
      const { data } = await apiClient.get<{ results: Oblast[] } | Oblast[]>('/oblasts/', { params: { page_size: 1000 } });
      return Array.isArray(data) ? data : data.results || [];
    },
    getById: async (id: number) => {
      const { data } = await apiClient.get<Oblast>(`/oblasts/${id}/`);
      return data;
    },
  },

  // Climate Zones
  climateZones: {
    getAll: async () => {
      const { data } = await apiClient.get<{ results: ClimateZone[] } | ClimateZone[]>('/climate-zones/', { params: { page_size: 1000 } });
      return Array.isArray(data) ? data : data.results || [];
    },
    getById: async (id: number) => {
      const { data } = await apiClient.get<ClimateZone>(`/climate-zones/${id}/`);
      return data;
    },
  },

  // Regions
  regions: {
    getAll: async (params?: { oblast?: number; climate_zone?: number }) => {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Ä–µ–≥–∏–æ–Ω—ã, –æ–±—Ö–æ–¥—è –ø–∞–≥–∏–Ω–∞—Ü–∏—é
      let allRegions: Region[] = [];
      let nextUrl: string | null = '/regions/';
      let pageNum = 1;
      
      console.log('üîç –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤...');
      
      while (nextUrl) {
        const queryParams = { ...params, page: pageNum, page_size: 100 };
        const { data } = await apiClient.get<{ results: Region[]; next: string | null; count: number } | Region[]>(
          nextUrl.startsWith('http') ? nextUrl : '/regions/',
          nextUrl.startsWith('http') ? undefined : { params: queryParams }
        );
        
        if (Array.isArray(data)) {
          // –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
          console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –º–∞—Å—Å–∏–≤ —Ä–µ–≥–∏–æ–Ω–æ–≤:', data.length);
          return data;
        } else {
          // –ü–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
          allRegions = [...allRegions, ...data.results];
          nextUrl = data.next;
          console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNum}: –ø–æ–ª—É—á–µ–Ω–æ ${data.results.length}, –≤—Å–µ–≥–æ ${allRegions.length} –∏–∑ ${data.count}`);
          pageNum++;
          
          // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
          if (pageNum > 50) {
            console.warn('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü');
            break;
          }
        }
      }
      
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤—Å–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–æ–≤:', allRegions.length);
      return allRegions;
    },
    getById: async (id: number) => {
      const { data } = await apiClient.get<Region>(`/regions/${id}/`);
      return data;
    },
  },

  // Indicators
  indicators: {
    getAll: async (params?: { 
      culture?: number; 
      culture_group?: number;
      is_universal?: boolean; 
      is_quality?: boolean; 
      category?: string;
      search?: string;
      is_required?: boolean;
      is_recommended?: boolean;
      is_auto_calculated?: boolean;
    }) => {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, –æ–±—Ö–æ–¥—è –ø–∞–≥–∏–Ω–∞—Ü–∏—é
      let allIndicators: any[] = [];
      let nextUrl: string | null = '/indicators/';
      let pageNum = 1;
      
      console.log('üîç –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π...');
      
      while (nextUrl) {
        const queryParams = { ...params, page: pageNum, page_size: 100 };
        const { data } = await apiClient.get<{ results: any[]; next: string | null; count: number } | any[]>(
          nextUrl.startsWith('http') ? nextUrl : '/indicators/',
          nextUrl.startsWith('http') ? undefined : { params: queryParams }
        );
        
        if (Array.isArray(data)) {
          // –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
          console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –º–∞—Å—Å–∏–≤ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π:', data.length);
          return data;
        } else {
          // –ü–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
          allIndicators = [...allIndicators, ...data.results];
          nextUrl = data.next;
          console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNum}: –ø–æ–ª—É—á–µ–Ω–æ ${data.results.length}, –≤—Å–µ–≥–æ ${allIndicators.length} –∏–∑ ${data.count}`);
          pageNum++;
          
          // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
          if (pageNum > 50) {
            console.warn('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü');
            break;
          }
        }
      }
      
      console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤—Å–µ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π:', allIndicators.length);
      return allIndicators;
    },
    getById: async (id: number) => {
      const { data } = await apiClient.get<Indicator>(`/indicators/${id}/`);
      return data;
    },
    getByTrial: async (trialId: number) => {
      const { data } = await apiClient.get<Indicator[]>(`/trials/${trialId}/indicators/`);
      return data;
    },
    create: async (payload: Omit<Indicator, 'id'>) => {
      const { data } = await apiClient.post<Indicator>('/indicators/', payload);
      return data;
    },
    update: async (id: number, payload: Partial<Indicator>) => {
      const { data } = await apiClient.patch<Indicator>(`/indicators/${id}/`, payload);
      return data;
    },
    delete: async (id: number) => {
      await apiClient.delete(`/indicators/${id}/`);
    },
  },

  // Culture Groups
  cultureGroups: {
    getAll: async () => {
      const { data } = await apiClient.get<CultureGroup[]>('/patents/group-cultures/');
      return data;
    },
    getById: async (id: number) => {
      const { data } = await apiClient.get<CultureGroup>(`/patents/group-cultures/${id}/`);
      return data;
    },
  },

  // Cultures
  cultures: {
    getAll: async (params?: { group?: number }) => {
      const { data } = await apiClient.get<Culture[] | { results: Culture[] }>('/patents/cultures/', { params });
      // –ë—ç–∫–µ–Ω–¥ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ª–∏–±–æ –º–∞—Å—Å–∏–≤, –ª–∏–±–æ –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å results
      return Array.isArray(data) ? data : data.results || [];
    },
    getById: async (id: number) => {
      const { data } = await apiClient.get<Culture>(`/patents/cultures/${id}/`);
      return data;
    },
  },

  // Originators
  originators: {
    getAll: async (params?: {
      search?: string;
      is_foreign?: boolean;
      is_nanoc?: boolean;
      has_code?: boolean;
      ordering?: string;
    }) => {
      const { data } = await apiClient.get<Originator[]>('/patents/ariginators/', { params });
      return data;
    },
    getById: async (id: number) => {
      const { data } = await apiClient.get<Originator>(`/patents/ariginators/${id}/`);
      return data;
    },
    create: async (payload: Omit<Originator, 'id' | 'originator_id' | 'synced_at' | 'created_at' | 'updated_at'>) => {
      const { data } = await apiClient.post<Originator>('/patents/ariginators/', payload);
      return data;
    },
    update: async (id: number, payload: Partial<Originator>) => {
      const { data } = await apiClient.patch<Originator>(`/patents/ariginators/${id}/`, payload);
      return data;
    },
    delete: async (id: number) => {
      await apiClient.delete(`/patents/ariginators/${id}/`);
    },
    getStatistics: async () => {
      const { data } = await apiClient.get<{
        total_count: number;
        foreign_count: number;
        domestic_count: number;
        nanoc_count: number;
        with_code_count: number;
        without_code_count: number;
      }>('/patents/ariginators/statistics/');
      return data;
    },
  },

  // Sort Records (from Trials Service with proper culture mapping)
  sortRecords: {
    getAll: async (params?: Record<string, any>) => {
      // –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º endpoint Trials —Å –º–∞–ø–ø–∏–Ω–≥–æ–º –∫—É–ª—å—Ç—É—Ä (Trials ID ‚Üí Patents ID)
      // –ü–∞—Ä–∞–º–µ—Ç—Ä 'culture' –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç—Å—è –≤ 'culture_id' –¥–ª—è backend
      const modifiedParams = params ? { ...params } : {};
      if (modifiedParams.culture) {
        modifiedParams.culture_id = modifiedParams.culture;
        delete modifiedParams.culture;
      }
      const { data } = await apiClient.get<{ sorts: SortRecord[] }>('/sort-records/by-culture/', { params: modifiedParams });
      // Backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º 'sorts', –∏–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Å—Å–∏–≤
      return data.sorts || [];
    },
    getById: async (id: number) => {
      const { data } = await apiClient.get<SortRecord>(`/patents/sorts/${id}/`);
      return data;
    },
    // Note: sync endpoints may not exist in Patents API
    sync: async (id: number) => {
      const { data } = await apiClient.post<SortRecord>(`/patents/sorts/${id}/sync/`);
      return data;
    },
    syncAll: async () => {
      const { data } = await apiClient.post('/patents/sorts/sync-all/');
      return data;
    },
  },

  // Trial Types
  trialTypes: {
    getAll: async () => {
      const { data } = await apiClient.get<TrialType[] | { results: TrialType[] }>('/trial-types/');
      // –ë—ç–∫–µ–Ω–¥ –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –ª–∏–±–æ –º–∞—Å—Å–∏–≤, –ª–∏–±–æ –ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å results
      return Array.isArray(data) ? data : data.results || [];
    },
    getById: async (id: number) => {
      const { data } = await apiClient.get<TrialType>(`/trial-types/${id}/`);
      return data;
    },
  },
};
