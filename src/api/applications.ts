import apiClient from './client';
import type {
  Application,
  CreateApplicationRequest,
  UpdateApplicationRequest,
  DistributeApplicationRequest,
  Trial,
  ApplicationStatistics,
  PendingApplicationsForRegion,
  CulturesForRegionResponse,
  RegionalStatusResponse,
} from '@/types/api.types';

export const applicationsService = {
  // Get all applications with optional filters
  getAll: async (params?: Record<string, any>) => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏, –æ–±—Ö–æ–¥—è –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    let allApplications: Application[] = [];
    let nextUrl: string | null = '/applications/';
    let pageNum = 1;
    
    console.log('üîç –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫...');
    
    while (nextUrl) {
      const queryParams = { ...params, page: pageNum, page_size: 100 };
      const { data }: { data: { results: Application[]; next: string | null; count: number } | Application[] } = await apiClient.get<{ results: Application[]; next: string | null; count: number } | Application[]>(
        nextUrl.startsWith('http') ? nextUrl : '/applications/',
        nextUrl.startsWith('http') ? undefined : { params: queryParams }
      );
      
      if (Array.isArray(data)) {
        // –ï—Å–ª–∏ –ø—Ä–∏—à–µ–ª –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –º–∞—Å—Å–∏–≤ –∑–∞—è–≤–æ–∫:', data.length);
        return data;
      } else {
        // –ü–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        allApplications = [...allApplications, ...data.results];
        nextUrl = data.next;
        console.log(`üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageNum}: –ø–æ–ª—É—á–µ–Ω–æ ${data.results.length}, –≤—Å–µ–≥–æ ${allApplications.length} –∏–∑ ${data.count}`);
        pageNum++;
        
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        if (pageNum > 50) {
          console.warn('‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Å—Ç—Ä–∞–Ω–∏—Ü');
          break;
        }
      }
    }
    
    console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: ${allApplications.length}`);
    return allApplications;
  },

  // Get single application by ID
  getById: async (id: number) => {
    const { data } = await apiClient.get<Application>(`/applications/${id}/`);
    return data;
  },

  // Create new application
  create: async (payload: CreateApplicationRequest) => {
    const { data } = await apiClient.post<Application>('/applications/', payload);
    return data;
  },

  // Update application
  update: async (id: number, payload: UpdateApplicationRequest) => {
    const { data } = await apiClient.put<Application>(`/applications/${id}/`, payload);
    return data;
  },

  // Partial update
  patch: async (id: number, payload: Partial<UpdateApplicationRequest>) => {
    const { data } = await apiClient.patch<Application>(`/applications/${id}/`, payload);
    return data;
  },

  // Delete application
  delete: async (id: number) => {
    await apiClient.delete(`/applications/${id}/`);
  },

  // Distribute application to regions
  distribute: async (id: number, payload: DistributeApplicationRequest) => {
    const { data } = await apiClient.post<{ trials: Trial[]; application: Application }>(
      `/applications/${id}/distribute/`,
      payload
    );
    return data;
  },

  // Get regional trials for application
  getRegionalTrials: async (id: number) => {
    const { data } = await apiClient.get<Trial[]>(`/applications/${id}/regional-trials/`);
    return data;
  },

  // ‚≠ê –ù–æ–≤—ã–π –º–µ—Ç–æ–¥: –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã –ø–æ –æ–±–ª–∞—Å—Ç—è–º (–º–Ω–æ–≥–æ–ª–µ—Ç–Ω–∏–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è)
  getRegionalStatus: async (id: number) => {
    const { data } = await apiClient.get<RegionalStatusResponse>(
      `/applications/${id}/regional-status/`
    );
    return data;
  },

  // Get decisions for application
  getDecisions: async (id: number) => {
    const { data } = await apiClient.get(`/applications/${id}/decisions/`);
    return data;
  },

  // Get statistics
  getStatistics: async () => {
    const { data } = await apiClient.get<ApplicationStatistics>('/applications/statistics/');
    return data;
  },

  // Get cultures with applications for region
  getCulturesForRegion: async (regionId: number) => {
    const { data } = await apiClient.get<CulturesForRegionResponse>(
      '/applications/cultures-for-region/',
      { params: { region_id: regionId } }
    );
    return data;
  },

  // Get pending applications for region (culture_id optional)
  getPendingForRegion: async (regionId: number, cultureId?: number) => {
    const { data } = await apiClient.get<PendingApplicationsForRegion>(
      '/applications/pending-for-region/',
      { params: { region_id: regionId, culture_id: cultureId } }
    );
    return data;
  },
};
